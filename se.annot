"se.ml" 39 804 808 "se.ml" 39 804 811
type(
  OcamlSTP.context
)
ident(
  def stp "se.ml" 40 830 830 --
)
"se.ml" 39 804 814 "se.ml" 39 804 826
type(
  unit -> OcamlSTP.context
)
ident(
  ext_ref OcamlSTP.make_context
)
"se.ml" 39 804 827 "se.ml" 39 804 829
type(
  unit
)
"se.ml" 39 804 814 "se.ml" 39 804 829
type(
  OcamlSTP.context
)
"se.ml" 40 830 834 "se.ml" 40 830 835
type(
  int
)
ident(
  def w "se.ml" 42 842 842 --
)
"se.ml" 40 830 838 "se.ml" 40 830 840
type(
  int
)
"se.ml" 42 842 850 "se.ml" 42 842 856
type(
  'a -> ('a * 'b * 'c) list -> 'b * 'c
)
ident(
  def assoc3 "se.ml" 42 842 842 --
)
"se.ml" 42 842 857 "se.ml" 42 842 858
type(
  'a
)
ident(
  def d "se.ml" 42 842 859 "se.ml" 48 947 960
)
"se.ml" 42 842 859 "se.ml" 42 842 860
type(
  ('a * 'b * 'c) list
)
ident(
  def l "se.ml" 42 842 863 "se.ml" 48 947 960
)
"se.ml" 42 842 869 "se.ml" 42 842 870
type(
  ('a * 'b * 'c) list
)
ident(
  int_ref l "se.ml" 42 842 859 "se.ml" 42 842 860
)
"se.ml" 43 876 879 "se.ml" 43 876 881
type(
  ('a * 'b * 'c) list
)
"se.ml" 43 876 885 "se.ml" 43 876 890
type(
  exn -> 'b * 'c
)
ident(
  ext_ref Pervasives.raise
)
"se.ml" 43 876 891 "se.ml" 43 876 897
type(
  exn
)
"se.ml" 43 876 885 "se.ml" 43 876 897
type(
  'b * 'c
)
"se.ml" 44 898 902 "se.ml" 44 898 903
type(
  'a
)
ident(
  def a "se.ml" 45 915 917 "se.ml" 48 947 960
)
"se.ml" 44 898 904 "se.ml" 44 898 905
type(
  'b
)
ident(
  def b "se.ml" 45 915 917 "se.ml" 48 947 960
)
"se.ml" 44 898 906 "se.ml" 44 898 907
type(
  'c
)
ident(
  def c "se.ml" 45 915 917 "se.ml" 48 947 960
)
"se.ml" 44 898 901 "se.ml" 44 898 908
type(
  'a * 'b * 'c
)
"se.ml" 44 898 910 "se.ml" 44 898 911
type(
  ('a * 'b * 'c) list
)
ident(
  def t "se.ml" 45 915 917 "se.ml" 48 947 960
)
"se.ml" 44 898 901 "se.ml" 44 898 911
type(
  ('a * 'b * 'c) list
)
"se.ml" 45 915 920 "se.ml" 45 915 921
type(
  'a
)
ident(
  int_ref d "se.ml" 42 842 857 "se.ml" 42 842 858
)
"se.ml" 45 915 922 "se.ml" 45 915 923
type(
  'a -> 'a -> bool
)
ident(
  ext_ref Pervasives.( = )
)
"se.ml" 45 915 924 "se.ml" 45 915 925
type(
  'a
)
ident(
  int_ref a "se.ml" 44 898 902 "se.ml" 44 898 903
)
"se.ml" 45 915 920 "se.ml" 45 915 925
type(
  bool
)
"se.ml" 46 931 935 "se.ml" 46 931 936
type(
  'b
)
ident(
  int_ref b "se.ml" 44 898 904 "se.ml" 44 898 905
)
"se.ml" 46 931 937 "se.ml" 46 931 938
type(
  'c
)
ident(
  int_ref c "se.ml" 44 898 906 "se.ml" 44 898 907
)
"se.ml" 46 931 934 "se.ml" 46 931 939
type(
  'b * 'c
)
"se.ml" 48 947 950 "se.ml" 48 947 956
type(
  'a -> ('a * 'b * 'c) list -> 'b * 'c
)
ident(
  int_ref assoc3 "se.ml" 42 842 850 "se.ml" 42 842 856
)
"se.ml" 48 947 957 "se.ml" 48 947 958
type(
  'a
)
ident(
  int_ref d "se.ml" 42 842 857 "se.ml" 42 842 858
)
"se.ml" 48 947 959 "se.ml" 48 947 960
type(
  ('a * 'b * 'c) list
)
ident(
  int_ref t "se.ml" 44 898 910 "se.ml" 44 898 911
)
"se.ml" 48 947 950 "se.ml" 48 947 960
call(
  tail
)
type(
  'b * 'c
)
"se.ml" 45 915 917 "se.ml" 48 947 960
type(
  'b * 'c
)
"se.ml" 42 842 863 "se.ml" 48 947 960
type(
  'b * 'c
)
"se.ml" 51 965 969 "se.ml" 51 965 981
type(
  'a -> 'b -> ('a * 'b) list -> ('a * 'b) list
)
ident(
  def update_assoc "se.ml" 56 1041 1041 --
)
"se.ml" 51 965 982 "se.ml" 51 965 983
type(
  'a
)
ident(
  def k "se.ml" 51 965 984 "se.ml" 53 1026 1036
)
"se.ml" 51 965 984 "se.ml" 51 965 985
type(
  'b
)
ident(
  def v "se.ml" 51 965 986 "se.ml" 53 1026 1036
)
"se.ml" 51 965 986 "se.ml" 51 965 987
type(
  ('a * 'b) list
)
ident(
  def l "se.ml" 52 991 992 "se.ml" 53 1026 1036
)
"se.ml" 52 991 996 "se.ml" 52 991 998
type(
  ('a * 'b) list
)
"se.ml" 52 991 1001 "se.ml" 52 991 1018
type(
  'a -> ('a * 'b) list -> ('a * 'b) list
)
ident(
  ext_ref List.remove_assoc
)
"se.ml" 52 991 1019 "se.ml" 52 991 1020
type(
  'a
)
ident(
  int_ref k "se.ml" 51 965 982 "se.ml" 51 965 983
)
"se.ml" 52 991 1021 "se.ml" 52 991 1022
type(
  ('a * 'b) list
)
ident(
  int_ref l "se.ml" 51 965 986 "se.ml" 51 965 987
)
"se.ml" 52 991 1001 "se.ml" 52 991 1022
call(
  stack
)
type(
  ('a * 'b) list
)
"se.ml" 53 1026 1028 "se.ml" 53 1026 1029
type(
  'a
)
ident(
  int_ref k "se.ml" 51 965 982 "se.ml" 51 965 983
)
"se.ml" 53 1026 1030 "se.ml" 53 1026 1031
type(
  'b
)
ident(
  int_ref v "se.ml" 51 965 984 "se.ml" 51 965 985
)
"se.ml" 53 1026 1027 "se.ml" 53 1026 1032
type(
  'a * 'b
)
"se.ml" 53 1026 1034 "se.ml" 53 1026 1036
type(
  ('a * 'b) list
)
ident(
  int_ref l' "se.ml" 52 991 996 "se.ml" 52 991 998
)
"se.ml" 53 1026 1027 "se.ml" 53 1026 1036
type(
  ('a * 'b) list
)
"se.ml" 52 991 992 "se.ml" 53 1026 1036
type(
  ('a * 'b) list
)
"se.ml" 56 1041 1049 "se.ml" 56 1041 1058
type(
  ([ `array ], [< `const | `expr | `var > `expr ] as 'a) OcamlSTP.expr ->
  int -> ([ `array ], 'a) OcamlSTP.expr
)
ident(
  def initArray "se.ml" 56 1041 1041 --
)
"se.ml" 56 1041 1059 "se.ml" 56 1041 1060
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  def a "se.ml" 56 1041 1061 "se.ml" 64 1244 1264
)
"se.ml" 56 1041 1061 "se.ml" 56 1041 1062
type(
  int
)
ident(
  def i "se.ml" 57 1065 1066 "se.ml" 64 1244 1264
)
"se.ml" 57 1065 1069 "se.ml" 57 1065 1070
type(
  int
)
ident(
  int_ref i "se.ml" 56 1041 1061 "se.ml" 56 1041 1062
)
"se.ml" 57 1065 1071 "se.ml" 57 1065 1072
type(
  int -> int -> bool
)
ident(
  ext_ref Pervasives.( < )
)
"se.ml" 57 1065 1073 "se.ml" 57 1065 1074
type(
  int
)
"se.ml" 57 1065 1069 "se.ml" 57 1065 1074
type(
  bool
)
"se.ml" 58 1080 1082 "se.ml" 58 1080 1083
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 56 1041 1059 "se.ml" 56 1041 1060
)
"se.ml" 61 1144 1150 "se.ml" 61 1144 1151
type(
  ([ `bv ], _[< `const | `expr | `var > `const ]) OcamlSTP.expr
)
"se.ml" 61 1144 1154 "se.ml" 61 1144 1163
type(
  OcamlSTP.context ->
  int ->
  int -> ([ `bv ], _[< `const | `expr | `var > `const ] as 'b) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 61 1144 1164 "se.ml" 61 1144 1167
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 61 1144 1168 "se.ml" 61 1144 1169
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 61 1144 1170 "se.ml" 61 1144 1171
type(
  int
)
"se.ml" 61 1144 1154 "se.ml" 61 1144 1171
type(
  ([ `bv ], 'b) OcamlSTP.expr
)
"se.ml" 62 1175 1181 "se.ml" 62 1175 1183
type(
  ([ `bv ], _[< `const | `expr | `var > `const ]) OcamlSTP.expr
)
"se.ml" 62 1175 1186 "se.ml" 62 1175 1195
type(
  OcamlSTP.context ->
  int ->
  int -> ([ `bv ], _[< `const | `expr | `var > `const ] as 'c) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 62 1175 1196 "se.ml" 62 1175 1199
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 62 1175 1200 "se.ml" 62 1175 1201
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 62 1175 1202 "se.ml" 62 1175 1203
type(
  int
)
ident(
  int_ref i "se.ml" 56 1041 1061 "se.ml" 56 1041 1062
)
"se.ml" 62 1175 1186 "se.ml" 62 1175 1203
type(
  ([ `bv ], 'c) OcamlSTP.expr
)
"se.ml" 63 1207 1213 "se.ml" 63 1207 1215
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 63 1207 1218 "se.ml" 63 1207 1229
type(
  OcamlSTP.context ->
  ([ `array ], 'a) OcamlSTP.expr ->
  ([ `bv ], 'c) OcamlSTP.expr ->
  ([ `bv ], 'b) OcamlSTP.expr -> ([ `array ], 'a) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.array_write
)
"se.ml" 63 1207 1230 "se.ml" 63 1207 1233
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 63 1207 1234 "se.ml" 63 1207 1235
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 56 1041 1059 "se.ml" 56 1041 1060
)
"se.ml" 63 1207 1236 "se.ml" 63 1207 1238
type(
  ([ `bv ], 'c) OcamlSTP.expr
)
ident(
  int_ref i' "se.ml" 62 1175 1181 "se.ml" 62 1175 1183
)
"se.ml" 63 1207 1239 "se.ml" 63 1207 1240
type(
  ([ `bv ], 'b) OcamlSTP.expr
)
ident(
  int_ref z "se.ml" 61 1144 1150 "se.ml" 61 1144 1151
)
"se.ml" 63 1207 1218 "se.ml" 63 1207 1240
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 64 1244 1246 "se.ml" 64 1244 1255
type(
  ([ `array ], 'a) OcamlSTP.expr -> int -> ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref initArray "se.ml" 56 1041 1049 "se.ml" 56 1041 1058
)
"se.ml" 64 1244 1256 "se.ml" 64 1244 1258
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref a' "se.ml" 63 1207 1213 "se.ml" 63 1207 1215
)
"se.ml" 64 1244 1260 "se.ml" 64 1244 1261
type(
  int
)
ident(
  int_ref i "se.ml" 56 1041 1061 "se.ml" 56 1041 1062
)
"se.ml" 64 1244 1261 "se.ml" 64 1244 1262
type(
  int -> int -> int
)
ident(
  ext_ref Pervasives.( - )
)
"se.ml" 64 1244 1262 "se.ml" 64 1244 1263
type(
  int
)
"se.ml" 64 1244 1259 "se.ml" 64 1244 1264
type(
  int
)
"se.ml" 64 1244 1246 "se.ml" 64 1244 1264
call(
  tail
)
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 63 1207 1209 "se.ml" 64 1244 1264
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 62 1175 1177 "se.ml" 64 1244 1264
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 61 1144 1146 "se.ml" 64 1244 1264
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 57 1065 1066 "se.ml" 64 1244 1264
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 67 1269 1277 "se.ml" 67 1269 1289
type(
  string ->
  ([ `array ], [< `const | `expr | `var > `expr ] as 'a) OcamlSTP.expr ->
  int -> ([ `array ], 'a) OcamlSTP.expr
)
ident(
  def initSymArray "se.ml" 67 1269 1269 --
)
"se.ml" 67 1269 1290 "se.ml" 67 1269 1291
type(
  string
)
ident(
  def v "se.ml" 67 1269 1292 "se.ml" 76 1521 1546
)
"se.ml" 67 1269 1292 "se.ml" 67 1269 1293
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  def a "se.ml" 67 1269 1294 "se.ml" 76 1521 1546
)
"se.ml" 67 1269 1294 "se.ml" 67 1269 1295
type(
  int
)
ident(
  def i "se.ml" 68 1298 1299 "se.ml" 76 1521 1546
)
"se.ml" 68 1298 1302 "se.ml" 68 1298 1303
type(
  int
)
ident(
  int_ref i "se.ml" 67 1269 1294 "se.ml" 67 1269 1295
)
"se.ml" 68 1298 1304 "se.ml" 68 1298 1305
type(
  int -> int -> bool
)
ident(
  ext_ref Pervasives.( < )
)
"se.ml" 68 1298 1306 "se.ml" 68 1298 1307
type(
  int
)
"se.ml" 68 1298 1302 "se.ml" 68 1298 1307
type(
  bool
)
"se.ml" 69 1313 1315 "se.ml" 69 1313 1316
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 67 1269 1292 "se.ml" 67 1269 1293
)
"se.ml" 72 1377 1383 "se.ml" 72 1377 1387
type(
  string
)
"se.ml" 72 1377 1390 "se.ml" 72 1377 1391
type(
  string
)
ident(
  int_ref v "se.ml" 67 1269 1290 "se.ml" 67 1269 1291
)
"se.ml" 72 1377 1391 "se.ml" 72 1377 1392
type(
  string -> string -> string
)
ident(
  ext_ref Pervasives.( ^ )
)
"se.ml" 72 1377 1392 "se.ml" 72 1377 1395
type(
  string
)
"se.ml" 72 1377 1395 "se.ml" 72 1377 1396
type(
  string -> string -> string
)
ident(
  ext_ref Pervasives.( ^ )
)
"se.ml" 72 1377 1397 "se.ml" 72 1377 1410
type(
  int -> string
)
ident(
  ext_ref Pervasives.string_of_int
)
"se.ml" 72 1377 1411 "se.ml" 72 1377 1412
type(
  int
)
ident(
  int_ref i "se.ml" 67 1269 1294 "se.ml" 67 1269 1295
)
"se.ml" 72 1377 1396 "se.ml" 72 1377 1413
call(
  stack
)
type(
  string
)
"se.ml" 72 1377 1413 "se.ml" 72 1377 1414
type(
  string -> string -> string
)
ident(
  ext_ref Pervasives.( ^ )
)
"se.ml" 72 1377 1414 "se.ml" 72 1377 1417
type(
  string
)
"se.ml" 72 1377 1396 "se.ml" 72 1377 1417
call(
  stack
)
type(
  string
)
"se.ml" 72 1377 1392 "se.ml" 72 1377 1417
call(
  stack
)
type(
  string
)
"se.ml" 72 1377 1390 "se.ml" 72 1377 1417
call(
  stack
)
type(
  string
)
"se.ml" 73 1421 1427 "se.ml" 73 1421 1428
type(
  ([ `bv ], _[< `const | `expr | `var > `var ]) OcamlSTP.expr
)
"se.ml" 73 1421 1431 "se.ml" 73 1421 1437
type(
  OcamlSTP.context ->
  string ->
  int -> ([ `bv ], _[< `const | `expr | `var > `var ] as 'b) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_var
)
"se.ml" 73 1421 1438 "se.ml" 73 1421 1441
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 73 1421 1442 "se.ml" 73 1421 1446
type(
  string
)
ident(
  int_ref name "se.ml" 72 1377 1383 "se.ml" 72 1377 1387
)
"se.ml" 73 1421 1447 "se.ml" 73 1421 1448
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 73 1421 1431 "se.ml" 73 1421 1448
type(
  ([ `bv ], 'b) OcamlSTP.expr
)
"se.ml" 74 1452 1458 "se.ml" 74 1452 1460
type(
  ([ `bv ], _[< `const | `expr | `var > `const ]) OcamlSTP.expr
)
"se.ml" 74 1452 1463 "se.ml" 74 1452 1472
type(
  OcamlSTP.context ->
  int ->
  int -> ([ `bv ], _[< `const | `expr | `var > `const ] as 'c) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 74 1452 1473 "se.ml" 74 1452 1476
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 74 1452 1477 "se.ml" 74 1452 1478
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 74 1452 1479 "se.ml" 74 1452 1480
type(
  int
)
ident(
  int_ref i "se.ml" 67 1269 1294 "se.ml" 67 1269 1295
)
"se.ml" 74 1452 1463 "se.ml" 74 1452 1480
type(
  ([ `bv ], 'c) OcamlSTP.expr
)
"se.ml" 75 1484 1490 "se.ml" 75 1484 1492
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 75 1484 1495 "se.ml" 75 1484 1506
type(
  OcamlSTP.context ->
  ([ `array ], 'a) OcamlSTP.expr ->
  ([ `bv ], 'c) OcamlSTP.expr ->
  ([ `bv ], 'b) OcamlSTP.expr -> ([ `array ], 'a) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.array_write
)
"se.ml" 75 1484 1507 "se.ml" 75 1484 1510
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 75 1484 1511 "se.ml" 75 1484 1512
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 67 1269 1292 "se.ml" 67 1269 1293
)
"se.ml" 75 1484 1513 "se.ml" 75 1484 1515
type(
  ([ `bv ], 'c) OcamlSTP.expr
)
ident(
  int_ref i' "se.ml" 74 1452 1458 "se.ml" 74 1452 1460
)
"se.ml" 75 1484 1516 "se.ml" 75 1484 1517
type(
  ([ `bv ], 'b) OcamlSTP.expr
)
ident(
  int_ref z "se.ml" 73 1421 1427 "se.ml" 73 1421 1428
)
"se.ml" 75 1484 1495 "se.ml" 75 1484 1517
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 76 1521 1523 "se.ml" 76 1521 1535
type(
  string ->
  ([ `array ], 'a) OcamlSTP.expr -> int -> ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref initSymArray "se.ml" 67 1269 1277 "se.ml" 67 1269 1289
)
"se.ml" 76 1521 1536 "se.ml" 76 1521 1537
type(
  string
)
ident(
  int_ref v "se.ml" 67 1269 1290 "se.ml" 67 1269 1291
)
"se.ml" 76 1521 1538 "se.ml" 76 1521 1540
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref a' "se.ml" 75 1484 1490 "se.ml" 75 1484 1492
)
"se.ml" 76 1521 1542 "se.ml" 76 1521 1543
type(
  int
)
ident(
  int_ref i "se.ml" 67 1269 1294 "se.ml" 67 1269 1295
)
"se.ml" 76 1521 1543 "se.ml" 76 1521 1544
type(
  int -> int -> int
)
ident(
  ext_ref Pervasives.( - )
)
"se.ml" 76 1521 1544 "se.ml" 76 1521 1545
type(
  int
)
"se.ml" 76 1521 1541 "se.ml" 76 1521 1546
type(
  int
)
"se.ml" 76 1521 1523 "se.ml" 76 1521 1546
call(
  tail
)
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 75 1484 1486 "se.ml" 76 1521 1546
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 74 1452 1454 "se.ml" 76 1521 1546
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 73 1421 1423 "se.ml" 76 1521 1546
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 72 1377 1379 "se.ml" 76 1521 1546
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 68 1298 1299 "se.ml" 76 1521 1546
type(
  ([ `array ], 'a) OcamlSTP.expr
)
"se.ml" 79 1551 1555 "se.ml" 79 1551 1564
type(
  int -> int
)
ident(
  def to_signed "se.ml" 86 1616 1616 --
)
"se.ml" 79 1551 1565 "se.ml" 79 1551 1566
type(
  int
)
ident(
  def i "se.ml" 80 1570 1571 "se.ml" 83 1608 1611
)
"se.ml" 80 1570 1574 "se.ml" 80 1570 1575
type(
  int
)
ident(
  int_ref i "se.ml" 79 1551 1565 "se.ml" 79 1551 1566
)
"se.ml" 80 1570 1576 "se.ml" 80 1570 1578
type(
  int -> int -> bool
)
ident(
  ext_ref Pervasives.( >= )
)
"se.ml" 80 1570 1579 "se.ml" 80 1570 1584
type(
  int
)
"se.ml" 80 1570 1574 "se.ml" 80 1570 1584
type(
  bool
)
"se.ml" 81 1590 1592 "se.ml" 81 1590 1593
type(
  int
)
ident(
  int_ref i "se.ml" 79 1551 1565 "se.ml" 79 1551 1566
)
"se.ml" 81 1590 1594 "se.ml" 81 1590 1595
type(
  int -> int -> int
)
ident(
  ext_ref Pervasives.( - )
)
"se.ml" 81 1590 1596 "se.ml" 81 1590 1601
type(
  int
)
"se.ml" 81 1590 1592 "se.ml" 81 1590 1601
type(
  int
)
"se.ml" 83 1608 1610 "se.ml" 83 1608 1611
type(
  int
)
ident(
  int_ref i "se.ml" 79 1551 1565 "se.ml" 79 1551 1566
)
"se.ml" 80 1570 1571 "se.ml" 83 1608 1611
type(
  int
)
"se.ml" 86 1616 1624 "se.ml" 86 1616 1634
type(
  ([ `array ], [< `const | `expr | `var ]) OcamlSTP.expr ->
  string -> int -> unit
)
ident(
  def printArray "se.ml" 86 1616 1616 --
)
"se.ml" 86 1616 1635 "se.ml" 86 1616 1636
type(
  ([ `array ], [< `const | `expr | `var ] as 'a) OcamlSTP.expr
)
ident(
  def a "se.ml" 86 1616 1637 "se.ml" 94 1807 1871
)
"se.ml" 86 1616 1637 "se.ml" 86 1616 1638
type(
  string
)
ident(
  def k "se.ml" 86 1616 1639 "se.ml" 94 1807 1871
)
"se.ml" 86 1616 1639 "se.ml" 86 1616 1640
type(
  int
)
ident(
  def i "se.ml" 87 1644 1645 "se.ml" 94 1807 1871
)
"se.ml" 87 1644 1648 "se.ml" 87 1644 1649
type(
  int
)
ident(
  int_ref i "se.ml" 86 1616 1639 "se.ml" 86 1616 1640
)
"se.ml" 87 1644 1650 "se.ml" 87 1644 1651
type(
  int -> int -> bool
)
ident(
  ext_ref Pervasives.( < )
)
"se.ml" 87 1644 1652 "se.ml" 87 1644 1653
type(
  int
)
"se.ml" 87 1644 1648 "se.ml" 87 1644 1653
type(
  bool
)
"se.ml" 88 1659 1661 "se.ml" 88 1659 1663
type(
  unit
)
"se.ml" 90 1670 1676 "se.ml" 90 1670 1678
type(
  ([ `bv ], _[< `const | `expr | `var > `const ]) OcamlSTP.expr
)
"se.ml" 90 1670 1681 "se.ml" 90 1670 1690
type(
  OcamlSTP.context ->
  int ->
  int -> ([ `bv ], _[< `const | `expr | `var > `const ] as 'b) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 90 1670 1691 "se.ml" 90 1670 1694
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 90 1670 1695 "se.ml" 90 1670 1696
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 90 1670 1697 "se.ml" 90 1670 1698
type(
  int
)
ident(
  int_ref i "se.ml" 86 1616 1639 "se.ml" 86 1616 1640
)
"se.ml" 90 1670 1681 "se.ml" 90 1670 1698
type(
  ([ `bv ], 'b) OcamlSTP.expr
)
"se.ml" 91 1702 1708 "se.ml" 91 1702 1710
type(
  ([ `bv ], _[< `const | `expr | `var > `expr ]) OcamlSTP.expr
)
"se.ml" 91 1702 1713 "se.ml" 91 1702 1723
type(
  OcamlSTP.context ->
  ([ `array ], 'a) OcamlSTP.expr ->
  ([ `bv ], 'b) OcamlSTP.expr ->
  ([ `bv ], _[< `const | `expr | `var > `expr ] as 'c) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.array_read
)
"se.ml" 91 1702 1724 "se.ml" 91 1702 1727
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 91 1702 1728 "se.ml" 91 1702 1729
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 86 1616 1635 "se.ml" 86 1616 1636
)
"se.ml" 91 1702 1730 "se.ml" 91 1702 1732
type(
  ([ `bv ], 'b) OcamlSTP.expr
)
ident(
  int_ref i' "se.ml" 90 1670 1676 "se.ml" 90 1670 1678
)
"se.ml" 91 1702 1713 "se.ml" 91 1702 1732
type(
  ([ `bv ], 'c) OcamlSTP.expr
)
"se.ml" 92 1736 1747 "se.ml" 92 1736 1748
type(
  ([ `bv ], [ `const ]) OcamlSTP.expr
)
"se.ml" 92 1736 1742 "se.ml" 92 1736 1748
type(
  ([ `bv ], [ `const ]) OcamlSTP.expr option
)
"se.ml" 92 1736 1751 "se.ml" 92 1736 1772
type(
  OcamlSTP.context ->
  ([ `bv ], 'c) OcamlSTP.expr -> ([ `bv ], [ `const ]) OcamlSTP.expr option
)
ident(
  ext_ref OcamlSTP.vc_get_counterexample
)
"se.ml" 92 1736 1773 "se.ml" 92 1736 1776
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 92 1736 1777 "se.ml" 92 1736 1779
type(
  ([ `bv ], 'c) OcamlSTP.expr
)
ident(
  int_ref v' "se.ml" 91 1702 1708 "se.ml" 91 1702 1710
)
"se.ml" 92 1736 1751 "se.ml" 92 1736 1779
type(
  ([ `bv ], [ `const ]) OcamlSTP.expr option
)
"se.ml" 93 1783 1785 "se.ml" 93 1783 1795
type(
  ([ `array ], 'a) OcamlSTP.expr -> string -> int -> unit
)
ident(
  int_ref printArray "se.ml" 86 1616 1624 "se.ml" 86 1616 1634
)
"se.ml" 93 1783 1796 "se.ml" 93 1783 1797
type(
  ([ `array ], 'a) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 86 1616 1635 "se.ml" 86 1616 1636
)
"se.ml" 93 1783 1798 "se.ml" 93 1783 1799
type(
  string
)
ident(
  int_ref k "se.ml" 86 1616 1637 "se.ml" 86 1616 1638
)
"se.ml" 93 1783 1801 "se.ml" 93 1783 1802
type(
  int
)
ident(
  int_ref i "se.ml" 86 1616 1639 "se.ml" 86 1616 1640
)
"se.ml" 93 1783 1802 "se.ml" 93 1783 1803
type(
  int -> int -> int
)
ident(
  ext_ref Pervasives.( - )
)
"se.ml" 93 1783 1803 "se.ml" 93 1783 1804
type(
  int
)
"se.ml" 93 1783 1800 "se.ml" 93 1783 1805
type(
  int
)
"se.ml" 93 1783 1785 "se.ml" 93 1783 1805
call(
  stack
)
type(
  unit
)
"se.ml" 94 1807 1809 "se.ml" 94 1807 1822
type(
  (string -> int -> int -> unit, out_channel, unit) format ->
  string -> int -> int -> unit
)
ident(
  ext_ref Printf.printf
)
"se.ml" 94 1807 1823 "se.ml" 94 1807 1840
type(
  (string -> int -> int -> unit, out_channel, unit) format
)
"se.ml" 94 1807 1841 "se.ml" 94 1807 1842
type(
  string
)
ident(
  int_ref k "se.ml" 86 1616 1637 "se.ml" 86 1616 1638
)
"se.ml" 94 1807 1843 "se.ml" 94 1807 1844
type(
  int
)
ident(
  int_ref i "se.ml" 86 1616 1639 "se.ml" 86 1616 1640
)
"se.ml" 94 1807 1846 "se.ml" 94 1807 1855
type(
  int -> int
)
ident(
  int_ref to_signed "se.ml" 79 1551 1555 "se.ml" 79 1551 1564
)
"se.ml" 94 1807 1857 "se.ml" 94 1807 1863
type(
  OcamlSTP.context -> ([ `bv ], [ `const ]) OcamlSTP.expr -> int
)
ident(
  ext_ref OcamlSTP.to_int
)
"se.ml" 94 1807 1864 "se.ml" 94 1807 1867
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 94 1807 1868 "se.ml" 94 1807 1869
type(
  ([ `bv ], [ `const ]) OcamlSTP.expr
)
ident(
  int_ref s "se.ml" 92 1736 1747 "se.ml" 92 1736 1748
)
"se.ml" 94 1807 1856 "se.ml" 94 1807 1870
type(
  int
)
"se.ml" 94 1807 1845 "se.ml" 94 1807 1871
call(
  stack
)
type(
  int
)
"se.ml" 94 1807 1809 "se.ml" 94 1807 1871
call(
  tail
)
type(
  unit
)
"se.ml" 93 1783 1785 "se.ml" 94 1807 1871
type(
  unit
)
"se.ml" 92 1736 1738 "se.ml" 94 1807 1871
type(
  unit
)
"se.ml" 91 1702 1704 "se.ml" 94 1807 1871
type(
  unit
)
"se.ml" 90 1670 1672 "se.ml" 94 1807 1871
type(
  unit
)
"se.ml" 87 1644 1645 "se.ml" 94 1807 1871
type(
  unit
)
"se.ml" 97 1876 1880 "se.ml" 97 1876 1885
type(
  'a -> ('b * 'a option * 'c) list -> 'b
)
ident(
  def getPC "se.ml" 106 2030 2030 --
)
"se.ml" 97 1876 1886 "se.ml" 97 1876 1891
type(
  'a
)
ident(
  def label "se.ml" 97 1876 1892 "se.ml" 103 2022 2025
)
"se.ml" 97 1876 1892 "se.ml" 97 1876 1897
type(
  ('b * 'a option * 'c) list
)
ident(
  def stmts "se.ml" 98 1901 1902 "se.ml" 103 2022 2025
)
"se.ml" 98 1901 1907 "se.ml" 98 1901 1909
type(
  'b
)
"se.ml" 98 1901 1910 "se.ml" 98 1901 1911
type(
  'a option
)
"se.ml" 98 1901 1912 "se.ml" 98 1901 1913
type(
  'c
)
"se.ml" 98 1901 1906 "se.ml" 98 1901 1914
type(
  'b * 'a option * 'c
)
"se.ml" 98 1901 1917 "se.ml" 98 1901 1926
type(
  ('b * 'a option * 'c -> bool) ->
  ('b * 'a option * 'c) list -> 'b * 'a option * 'c
)
ident(
  ext_ref List.find
)
"se.ml" 99 1929 1936 "se.ml" 99 1929 1937
type(
  'b
)
"se.ml" 99 1929 1938 "se.ml" 99 1929 1941
type(
  'a option
)
ident(
  def lab "se.ml" 99 1929 1948 "se.ml" 101 1994 2009
)
"se.ml" 99 1929 1942 "se.ml" 99 1929 1943
type(
  'c
)
"se.ml" 99 1929 1935 "se.ml" 99 1929 1944
type(
  'b * 'a option * 'c
)
"se.ml" 99 1929 1954 "se.ml" 99 1929 1957
type(
  'a option
)
ident(
  int_ref lab "se.ml" 99 1929 1938 "se.ml" 99 1929 1941
)
"se.ml" 100 1963 1973 "se.ml" 100 1963 1977
type(
  'a
)
ident(
  def lab' "se.ml" 100 1963 1981 "se.ml" 100 1963 1993
)
"se.ml" 100 1963 1968 "se.ml" 100 1963 1977
type(
  'a option
)
"se.ml" 100 1963 1981 "se.ml" 100 1963 1985
type(
  'a
)
ident(
  int_ref lab' "se.ml" 100 1963 1973 "se.ml" 100 1963 1977
)
"se.ml" 100 1963 1986 "se.ml" 100 1963 1987
type(
  'a -> 'a -> bool
)
ident(
  ext_ref Pervasives.( = )
)
"se.ml" 100 1963 1988 "se.ml" 100 1963 1993
type(
  'a
)
ident(
  int_ref label "se.ml" 97 1876 1886 "se.ml" 97 1876 1891
)
"se.ml" 100 1963 1981 "se.ml" 100 1963 1993
type(
  bool
)
"se.ml" 101 1994 1999 "se.ml" 101 1994 2000
type(
  'a option
)
"se.ml" 101 1994 2004 "se.ml" 101 1994 2009
type(
  bool
)
"se.ml" 99 1929 1948 "se.ml" 101 1994 2009
type(
  bool
)
"se.ml" 98 1901 1927 "se.ml" 102 2010 2012
type(
  'b * 'a option * 'c -> bool
)
"se.ml" 102 2010 2013 "se.ml" 102 2010 2018
type(
  ('b * 'a option * 'c) list
)
ident(
  int_ref stmts "se.ml" 97 1876 1892 "se.ml" 97 1876 1897
)
"se.ml" 98 1901 1917 "se.ml" 102 2010 2018
call(
  stack
)
type(
  'b * 'a option * 'c
)
"se.ml" 103 2022 2023 "se.ml" 103 2022 2025
type(
  'b
)
ident(
  int_ref pc "se.ml" 98 1901 1907 "se.ml" 98 1901 1909
)
"se.ml" 98 1901 1902 "se.ml" 103 2022 2025
type(
  'b
)
"se.ml" 106 2030 2034 "se.ml" 106 2030 2043
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  def lookupInt "se.ml" 118 2310 2310 --
)
"se.ml" 106 2030 2045 "se.ml" 106 2030 2046
type(
  arg
)
ident(
  def a "se.ml" 106 2030 2052 "se.ml" 115 2276 2305
)
"se.ml" 106 2030 2053 "se.ml" 106 2030 2056
type(
  mem
)
ident(
  def mem "se.ml" 106 2030 2064 "se.ml" 115 2276 2305
)
"se.ml" 106 2030 2070 "se.ml" 106 2030 2071
type(
  arg
)
ident(
  int_ref a "se.ml" 106 2030 2045 "se.ml" 106 2030 2046
)
"se.ml" 107 2077 2083 "se.ml" 107 2077 2084
type(
  id
)
ident(
  def x "se.ml" 107 2077 2088 "se.ml" 114 2273 2275
)
"se.ml" 107 2077 2080 "se.ml" 107 2077 2084
type(
  arg
)
"se.ml" 109 2096 2103 "se.ml" 109 2096 2105
type(
  cont
)
ident(
  def id "se.ml" 110 2133 2136 "se.ml" 112 2171 2215
)
"se.ml" 109 2096 2113 "se.ml" 109 2096 2123
type(
  id -> mem -> cont
)
ident(
  ext_ref List.assoc
)
"se.ml" 109 2096 2124 "se.ml" 109 2096 2125
type(
  id
)
ident(
  int_ref x "se.ml" 107 2077 2083 "se.ml" 107 2077 2084
)
"se.ml" 109 2096 2126 "se.ml" 109 2096 2129
type(
  mem
)
ident(
  int_ref mem "se.ml" 106 2030 2053 "se.ml" 106 2030 2056
)
"se.ml" 109 2096 2113 "se.ml" 109 2096 2129
call(
  stack
)
type(
  cont
)
type(
  cont
)
"se.ml" 110 2133 2142 "se.ml" 110 2133 2144
type(
  cont
)
ident(
  int_ref id "se.ml" 109 2096 2103 "se.ml" 109 2096 2105
)
"se.ml" 111 2150 2162 "se.ml" 111 2150 2164
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  def x' "se.ml" 111 2150 2168 "se.ml" 111 2150 2170
)
"se.ml" 111 2150 2156 "se.ml" 111 2150 2164
type(
  cont
)
"se.ml" 111 2150 2168 "se.ml" 111 2150 2170
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 111 2150 2162 "se.ml" 111 2150 2164
)
"se.ml" 112 2171 2177 "se.ml" 112 2171 2178
type(
  cont
)
"se.ml" 112 2171 2182 "se.ml" 112 2171 2190
type(
  string -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref Pervasives.failwith
)
"se.ml" 112 2171 2191 "se.ml" 112 2171 2215
type(
  string
)
"se.ml" 112 2171 2182 "se.ml" 112 2171 2215
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 110 2133 2136 "se.ml" 112 2171 2215
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 109 2096 2099 "se.ml" 112 2171 2215
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 113 2235 2242 "se.ml" 113 2235 2251
type(
  exn
)
"se.ml" 113 2235 2255 "se.ml" 113 2235 2264
type(
  OcamlSTP.context ->
  int -> int -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 113 2235 2265 "se.ml" 113 2235 2268
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 113 2235 2269 "se.ml" 113 2235 2270
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 113 2235 2271 "se.ml" 113 2235 2272
type(
  int
)
"se.ml" 113 2235 2255 "se.ml" 113 2235 2272
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 107 2077 2088 "se.ml" 114 2273 2275
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 115 2276 2283 "se.ml" 115 2276 2284
type(
  int
)
ident(
  def i "se.ml" 115 2276 2288 "se.ml" 115 2276 2305
)
"se.ml" 115 2276 2279 "se.ml" 115 2276 2284
type(
  arg
)
"se.ml" 115 2276 2288 "se.ml" 115 2276 2297
type(
  OcamlSTP.context ->
  int -> int -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 115 2276 2298 "se.ml" 115 2276 2301
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 115 2276 2302 "se.ml" 115 2276 2303
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 115 2276 2304 "se.ml" 115 2276 2305
type(
  int
)
ident(
  int_ref i "se.ml" 115 2276 2283 "se.ml" 115 2276 2284
)
"se.ml" 115 2276 2288 "se.ml" 115 2276 2305
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 106 2030 2064 "se.ml" 115 2276 2305
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 118 2310 2314 "se.ml" 118 2310 2325
type(
  arg -> mem -> ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
ident(
  def lookupArray "se.ml" 129 2610 2610 --
)
"se.ml" 118 2310 2327 "se.ml" 118 2310 2328
type(
  arg
)
ident(
  def a "se.ml" 118 2310 2334 "se.ml" 125 2503 2552
)
"se.ml" 118 2310 2335 "se.ml" 118 2310 2338
type(
  mem
)
ident(
  def mem "se.ml" 118 2310 2346 "se.ml" 125 2503 2552
)
"se.ml" 118 2310 2352 "se.ml" 118 2310 2353
type(
  arg
)
ident(
  int_ref a "se.ml" 118 2310 2327 "se.ml" 118 2310 2328
)
"se.ml" 119 2359 2365 "se.ml" 119 2359 2366
type(
  id
)
ident(
  def x "se.ml" 119 2359 2370 "se.ml" 124 2500 2502
)
"se.ml" 119 2359 2362 "se.ml" 119 2359 2366
type(
  arg
)
"se.ml" 120 2372 2378 "se.ml" 120 2372 2380
type(
  cont
)
"se.ml" 120 2372 2388 "se.ml" 120 2372 2398
type(
  id -> mem -> cont
)
ident(
  ext_ref List.assoc
)
"se.ml" 120 2372 2399 "se.ml" 120 2372 2400
type(
  id
)
ident(
  int_ref x "se.ml" 119 2359 2365 "se.ml" 119 2359 2366
)
"se.ml" 120 2372 2401 "se.ml" 120 2372 2404
type(
  mem
)
ident(
  int_ref mem "se.ml" 118 2310 2335 "se.ml" 118 2310 2338
)
"se.ml" 120 2372 2388 "se.ml" 120 2372 2404
call(
  stack
)
type(
  cont
)
type(
  cont
)
"se.ml" 121 2408 2416 "se.ml" 121 2408 2418
type(
  cont
)
ident(
  int_ref id "se.ml" 120 2372 2378 "se.ml" 120 2372 2380
)
"se.ml" 122 2424 2436 "se.ml" 122 2424 2438
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  def x' "se.ml" 122 2424 2445 "se.ml" 122 2424 2451
)
"se.ml" 122 2424 2439 "se.ml" 122 2424 2440
type(
  int
)
ident(
  def n "se.ml" 122 2424 2445 "se.ml" 122 2424 2451
)
"se.ml" 122 2424 2429 "se.ml" 122 2424 2441
type(
  cont
)
"se.ml" 122 2424 2446 "se.ml" 122 2424 2448
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 122 2424 2436 "se.ml" 122 2424 2438
)
"se.ml" 122 2424 2449 "se.ml" 122 2424 2450
type(
  int
)
ident(
  int_ref n "se.ml" 122 2424 2439 "se.ml" 122 2424 2440
)
"se.ml" 122 2424 2445 "se.ml" 122 2424 2451
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 123 2452 2457 "se.ml" 123 2452 2458
type(
  cont
)
"se.ml" 123 2452 2462 "se.ml" 123 2452 2470
type(
  string -> ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
ident(
  ext_ref Pervasives.failwith
)
"se.ml" 123 2452 2471 "se.ml" 123 2452 2499
type(
  string
)
"se.ml" 123 2452 2462 "se.ml" 123 2452 2499
call(
  tail
)
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 121 2408 2410 "se.ml" 123 2452 2499
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 119 2359 2370 "se.ml" 124 2500 2502
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 125 2503 2510 "se.ml" 125 2503 2511
type(
  int
)
ident(
  def i "se.ml" 125 2503 2515 "se.ml" 125 2503 2552
)
"se.ml" 125 2503 2506 "se.ml" 125 2503 2511
type(
  arg
)
"se.ml" 125 2503 2515 "se.ml" 125 2503 2523
type(
  string -> ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
ident(
  ext_ref Pervasives.failwith
)
"se.ml" 125 2503 2524 "se.ml" 125 2503 2552
type(
  string
)
"se.ml" 125 2503 2515 "se.ml" 125 2503 2552
call(
  tail
)
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 118 2310 2346 "se.ml" 125 2503 2552
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 129 2610 2614 "se.ml" 129 2610 2616
type(
  (pc * lab option * prestmt) list -> unit
)
ident(
  def se "se.ml" 267 7282 7302 --
)
"se.ml" 129 2610 2617 "se.ml" 129 2610 2622
type(
  (pc * lab option * prestmt) list
)
ident(
  def stmts "se.ml" 130 2625 2626 "se.ml" 267 7282 7302
)
"se.ml" 130 2625 2630 "se.ml" 130 2625 2635
type(
  int ref
)
"se.ml" 130 2625 2638 "se.ml" 130 2625 2641
type(
  int -> int ref
)
ident(
  ext_ref Pervasives.ref
)
"se.ml" 130 2625 2642 "se.ml" 130 2625 2643
type(
  int
)
"se.ml" 130 2625 2638 "se.ml" 130 2625 2643
type(
  int ref
)
"se.ml" 131 2647 2652 "se.ml" 131 2647 2656
type(
  (pc * lab option * prestmt) list -> pc * pcond * mem -> state list
)
"se.ml" 131 2647 2657 "se.ml" 131 2647 2662
type(
  (pc * lab option * prestmt) list
)
ident(
  def stmts "se.ml" 131 2647 2663 "se.ml" 258 7115 7117
)
"se.ml" 131 2647 2664 "se.ml" 131 2647 2666
type(
  pc
)
ident(
  def pc "se.ml" 131 2647 2676 "se.ml" 258 7115 7117
)
"se.ml" 131 2647 2667 "se.ml" 131 2647 2671
type(
  pcond
)
ident(
  def cond "se.ml" 131 2647 2676 "se.ml" 258 7115 7117
)
"se.ml" 131 2647 2672 "se.ml" 131 2647 2675
type(
  mem
)
ident(
  def mem "se.ml" 131 2647 2676 "se.ml" 258 7115 7117
)
"se.ml" 131 2647 2663 "se.ml" 131 2647 2676
type(
  pc * pcond * mem
)
"se.ml" 132 2694 2700 "se.ml" 132 2694 2705
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 132 2694 2706 "se.ml" 132 2694 2709
type(
  OcamlSTP.context
)
ident(
  def stp "se.ml" 132 2694 2710 "se.ml" 154 3343 3346
)
"se.ml" 132 2694 2710 "se.ml" 132 2694 2711
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  def e "se.ml" 132 2694 2714 "se.ml" 154 3343 3346
)
"se.ml" 133 2716 2719 "se.ml" 133 2716 2726
type(
  OcamlSTP.context -> unit
)
ident(
  ext_ref OcamlSTP.vc_push
)
"se.ml" 133 2716 2727 "se.ml" 133 2716 2730
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 132 2694 2706 "se.ml" 132 2694 2709
)
"se.ml" 133 2716 2719 "se.ml" 133 2716 2730
type(
  unit
)
"se.ml" 135 2774 2777 "se.ml" 135 2774 2786
type(
  (([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> unit) ->
  pcond -> unit
)
ident(
  ext_ref List.iter
)
"se.ml" 135 2774 2793 "se.ml" 135 2774 2794
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  def c "se.ml" 135 2774 2798 "se.ml" 135 2774 2813
)
"se.ml" 135 2774 2798 "se.ml" 135 2774 2807
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> unit
)
ident(
  ext_ref OcamlSTP.vc_assert
)
"se.ml" 135 2774 2808 "se.ml" 135 2774 2811
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 132 2694 2706 "se.ml" 132 2694 2709
)
"se.ml" 135 2774 2812 "se.ml" 135 2774 2813
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref c "se.ml" 135 2774 2793 "se.ml" 135 2774 2794
)
"se.ml" 135 2774 2798 "se.ml" 135 2774 2813
type(
  unit
)
"se.ml" 135 2774 2787 "se.ml" 135 2774 2814
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> unit
)
"se.ml" 135 2774 2815 "se.ml" 135 2774 2819
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 135 2774 2777 "se.ml" 135 2774 2819
call(
  stack
)
type(
  unit
)
"se.ml" 136 2821 2828 "se.ml" 136 2821 2829
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 136 2821 2839 "se.ml" 136 2821 2847
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> OcamlSTP.validity
)
ident(
  ext_ref OcamlSTP.vc_query
)
"se.ml" 136 2821 2848 "se.ml" 136 2821 2851
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 132 2694 2706 "se.ml" 132 2694 2709
)
"se.ml" 136 2821 2852 "se.ml" 136 2821 2853
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref e "se.ml" 132 2694 2710 "se.ml" 132 2694 2711
)
"se.ml" 136 2821 2838 "se.ml" 136 2821 2854
type(
  OcamlSTP.validity
)
"se.ml" 137 2860 2866 "se.ml" 137 2860 2871
type(
  OcamlSTP.validity
)
"se.ml" 137 2860 2877 "se.ml" 137 2860 2879
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 137 2860 2879 "se.ml" 137 2860 2880
type(
  pc -> int -> int
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 137 2860 2880 "se.ml" 137 2860 2881
type(
  int
)
"se.ml" 137 2860 2877 "se.ml" 137 2860 2881
type(
  int
)
"se.ml" 137 2860 2882 "se.ml" 137 2860 2883
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref e "se.ml" 132 2694 2710 "se.ml" 132 2694 2711
)
"se.ml" 137 2860 2885 "se.ml" 137 2860 2889
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 137 2860 2882 "se.ml" 137 2860 2889
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list
)
"se.ml" 137 2860 2890 "se.ml" 137 2860 2893
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 137 2860 2876 "se.ml" 137 2860 2894
type(
  int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem
)
"se.ml" 137 2860 2875 "se.ml" 137 2860 2895
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 138 2896 2902 "se.ml" 138 2896 2909
type(
  OcamlSTP.validity
)
"se.ml" 139 2913 2919 "se.ml" 139 2913 2924
type(
  int ref
)
ident(
  int_ref fails "se.ml" 130 2625 2630 "se.ml" 130 2625 2635
)
"se.ml" 139 2913 2925 "se.ml" 139 2913 2927
type(
  int ref -> int -> unit
)
ident(
  ext_ref Pervasives.( := )
)
"se.ml" 139 2913 2928 "se.ml" 139 2913 2929
type(
  int ref -> int
)
ident(
  ext_ref Pervasives.( ! )
)
"se.ml" 139 2913 2929 "se.ml" 139 2913 2934
type(
  int ref
)
ident(
  int_ref fails "se.ml" 130 2625 2630 "se.ml" 130 2625 2635
)
"se.ml" 139 2913 2928 "se.ml" 139 2913 2934
type(
  int
)
"se.ml" 139 2913 2935 "se.ml" 139 2913 2936
type(
  int -> int -> int
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 139 2913 2937 "se.ml" 139 2913 2938
type(
  int
)
"se.ml" 139 2913 2928 "se.ml" 139 2913 2938
type(
  int
)
"se.ml" 139 2913 2919 "se.ml" 139 2913 2938
type(
  unit
)
"se.ml" 140 2940 2945 "se.ml" 140 2940 2958
type(
  (pc -> unit, out_channel, unit) format -> pc -> unit
)
ident(
  ext_ref Printf.printf
)
"se.ml" 140 2940 2959 "se.ml" 140 2940 2970
type(
  (pc -> unit, out_channel, unit) format
)
"se.ml" 140 2940 2971 "se.ml" 140 2940 2973
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 140 2940 2945 "se.ml" 140 2940 2973
call(
  stack
)
type(
  unit
)
"se.ml" 142 2998 3003 "se.ml" 142 2998 3012
type(
  (id * cont -> unit) -> mem -> unit
)
ident(
  ext_ref List.iter
)
"se.ml" 142 2998 3020 "se.ml" 142 2998 3021
type(
  id
)
ident(
  def k "se.ml" 142 2998 3028 "se.ml" 147 3197 3240
)
"se.ml" 142 2998 3022 "se.ml" 142 2998 3023
type(
  cont
)
ident(
  def v "se.ml" 142 2998 3028 "se.ml" 147 3197 3240
)
"se.ml" 142 2998 3019 "se.ml" 142 2998 3024
type(
  id * cont
)
"se.ml" 142 2998 3034 "se.ml" 142 2998 3035
type(
  cont
)
ident(
  int_ref v "se.ml" 142 2998 3022 "se.ml" 142 2998 3023
)
"se.ml" 143 3041 3055 "se.ml" 143 3041 3057
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  def v' "se.ml" 144 3061 3068 "se.ml" 146 3145 3196
)
"se.ml" 143 3041 3049 "se.ml" 143 3041 3057
type(
  cont
)
"se.ml" 144 3061 3077 "se.ml" 144 3061 3078
type(
  ([ `bv ], [ `const ]) OcamlSTP.expr
)
"se.ml" 144 3061 3072 "se.ml" 144 3061 3078
type(
  ([ `bv ], [ `const ]) OcamlSTP.expr option
)
"se.ml" 144 3061 3081 "se.ml" 144 3061 3102
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const ]) OcamlSTP.expr option
)
ident(
  ext_ref OcamlSTP.vc_get_counterexample
)
"se.ml" 144 3061 3103 "se.ml" 144 3061 3106
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 132 2694 2706 "se.ml" 132 2694 2709
)
"se.ml" 144 3061 3107 "se.ml" 144 3061 3109
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref v' "se.ml" 143 3041 3055 "se.ml" 143 3041 3057
)
"se.ml" 144 3061 3081 "se.ml" 144 3061 3109
type(
  ([ `bv ], [ `const ]) OcamlSTP.expr option
)
"se.ml" 145 3113 3124 "se.ml" 145 3113 3126
type(
  int
)
"se.ml" 145 3113 3129 "se.ml" 145 3113 3135
type(
  OcamlSTP.context -> ([ `bv ], [ `const ]) OcamlSTP.expr -> int
)
ident(
  ext_ref OcamlSTP.to_int
)
"se.ml" 145 3113 3136 "se.ml" 145 3113 3139
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 132 2694 2706 "se.ml" 132 2694 2709
)
"se.ml" 145 3113 3140 "se.ml" 145 3113 3141
type(
  ([ `bv ], [ `const ]) OcamlSTP.expr
)
ident(
  int_ref s "se.ml" 144 3061 3077 "se.ml" 144 3061 3078
)
"se.ml" 145 3113 3129 "se.ml" 145 3113 3141
type(
  int
)
"se.ml" 146 3145 3152 "se.ml" 146 3145 3165
type(
  (id -> int -> unit, out_channel, unit) format -> id -> int -> unit
)
ident(
  ext_ref Printf.printf
)
"se.ml" 146 3145 3166 "se.ml" 146 3145 3179
type(
  (id -> int -> unit, out_channel, unit) format
)
"se.ml" 146 3145 3180 "se.ml" 146 3145 3181
type(
  id
)
ident(
  int_ref k "se.ml" 142 2998 3020 "se.ml" 142 2998 3021
)
"se.ml" 146 3145 3183 "se.ml" 146 3145 3192
type(
  int -> int
)
ident(
  int_ref to_signed "se.ml" 79 1551 1555 "se.ml" 79 1551 1564
)
"se.ml" 146 3145 3193 "se.ml" 146 3145 3195
type(
  int
)
ident(
  int_ref s' "se.ml" 145 3113 3124 "se.ml" 145 3113 3126
)
"se.ml" 146 3145 3182 "se.ml" 146 3145 3196
call(
  stack
)
type(
  int
)
"se.ml" 146 3145 3152 "se.ml" 146 3145 3196
call(
  tail
)
type(
  unit
)
"se.ml" 145 3113 3120 "se.ml" 146 3145 3196
type(
  unit
)
"se.ml" 144 3061 3068 "se.ml" 146 3145 3196
type(
  unit
)
"se.ml" 147 3197 3212 "se.ml" 147 3197 3213
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  def a "se.ml" 147 3197 3220 "se.ml" 147 3197 3240
)
"se.ml" 147 3197 3214 "se.ml" 147 3197 3215
type(
  int
)
ident(
  def n "se.ml" 147 3197 3220 "se.ml" 147 3197 3240
)
"se.ml" 147 3197 3205 "se.ml" 147 3197 3216
type(
  cont
)
"se.ml" 147 3197 3220 "se.ml" 147 3197 3230
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr -> id -> int -> unit
)
ident(
  int_ref printArray "se.ml" 86 1616 1624 "se.ml" 86 1616 1634
)
"se.ml" 147 3197 3231 "se.ml" 147 3197 3232
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 147 3197 3212 "se.ml" 147 3197 3213
)
"se.ml" 147 3197 3233 "se.ml" 147 3197 3234
type(
  id
)
ident(
  int_ref k "se.ml" 142 2998 3020 "se.ml" 142 2998 3021
)
"se.ml" 147 3197 3236 "se.ml" 147 3197 3237
type(
  int
)
ident(
  int_ref n "se.ml" 147 3197 3214 "se.ml" 147 3197 3215
)
"se.ml" 147 3197 3237 "se.ml" 147 3197 3238
type(
  int -> int -> int
)
ident(
  ext_ref Pervasives.( - )
)
"se.ml" 147 3197 3238 "se.ml" 147 3197 3239
type(
  int
)
"se.ml" 147 3197 3235 "se.ml" 147 3197 3240
type(
  int
)
"se.ml" 147 3197 3220 "se.ml" 147 3197 3240
call(
  tail
)
type(
  unit
)
"se.ml" 142 2998 3028 "se.ml" 147 3197 3240
type(
  unit
)
"se.ml" 142 2998 3013 "se.ml" 148 3241 3247
type(
  id * cont -> unit
)
"se.ml" 148 3241 3248 "se.ml" 148 3241 3251
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 142 2998 3003 "se.ml" 148 3241 3251
call(
  stack
)
type(
  unit
)
"se.ml" 149 3253 3258 "se.ml" 149 3253 3260
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 142 2998 3003 "se.ml" 149 3253 3260
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 140 2940 2945 "se.ml" 149 3253 3260
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 139 2913 2919 "se.ml" 149 3253 3260
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 150 3261 3267 "se.ml" 150 3261 3276
type(
  OcamlSTP.validity
)
"se.ml" 150 3261 3280 "se.ml" 150 3261 3288
type(
  string ->
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
ident(
  ext_ref Pervasives.failwith
)
"se.ml" 150 3261 3289 "se.ml" 150 3261 3316
type(
  string
)
"se.ml" 150 3261 3280 "se.ml" 150 3261 3316
call(
  stack
)
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 136 2821 2832 "se.ml" 150 3261 3316
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 152 3323 3326 "se.ml" 152 3323 3332
type(
  OcamlSTP.context -> unit
)
ident(
  ext_ref OcamlSTP.vc_pop
)
"se.ml" 152 3323 3333 "se.ml" 152 3323 3336
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 132 2694 2706 "se.ml" 132 2694 2709
)
"se.ml" 152 3323 3326 "se.ml" 152 3323 3336
type(
  unit
)
"se.ml" 153 3338 3341 "se.ml" 153 3338 3342
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
ident(
  int_ref r "se.ml" 136 2821 2828 "se.ml" 136 2821 2829
)
"se.ml" 152 3323 3326 "se.ml" 153 3338 3342
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 136 2821 2824 "se.ml" 153 3338 3342
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 135 2774 2777 "se.ml" 153 3338 3342
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 132 2694 2714 "se.ml" 154 3343 3346
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 156 3356 3363 "se.ml" 156 3356 3366
type(
  lab option
)
ident(
  def lab "se.ml" 157 3390 3393 "se.ml" 255 7036 7090
)
"se.ml" 156 3356 3367 "se.ml" 156 3356 3368
type(
  prestmt
)
ident(
  def s "se.ml" 157 3390 3393 "se.ml" 255 7036 7090
)
"se.ml" 156 3356 3363 "se.ml" 156 3356 3368
type(
  lab option * prestmt
)
"se.ml" 156 3356 3371 "se.ml" 156 3356 3377
type(
  pc -> (pc * lab option * prestmt) list -> lab option * prestmt
)
ident(
  int_ref assoc3 "se.ml" 42 842 850 "se.ml" 42 842 856
)
"se.ml" 156 3356 3378 "se.ml" 156 3356 3380
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 156 3356 3381 "se.ml" 156 3356 3386
type(
  (pc * lab option * prestmt) list
)
ident(
  int_ref stmts "se.ml" 131 2647 2657 "se.ml" 131 2647 2662
)
"se.ml" 156 3356 3371 "se.ml" 156 3356 3386
call(
  stack
)
type(
  lab option * prestmt
)
"se.ml" 157 3390 3399 "se.ml" 157 3390 3400
type(
  prestmt
)
ident(
  int_ref s "se.ml" 156 3356 3367 "se.ml" 156 3356 3368
)
"se.ml" 158 3406 3417 "se.ml" 158 3406 3418
type(
  id
)
ident(
  def x "se.ml" 158 3406 3430 "se.ml" 170 4045 4050
)
"se.ml" 158 3406 3419 "se.ml" 158 3406 3420
type(
  arg
)
ident(
  def y "se.ml" 158 3406 3430 "se.ml" 170 4045 4050
)
"se.ml" 158 3406 3421 "se.ml" 158 3406 3423
type(
  bop
)
ident(
  def op "se.ml" 158 3406 3430 "se.ml" 170 4045 4050
)
"se.ml" 158 3406 3424 "se.ml" 158 3406 3425
type(
  arg
)
ident(
  def z "se.ml" 158 3406 3430 "se.ml" 170 4045 4050
)
"se.ml" 158 3406 3412 "se.ml" 158 3406 3426
type(
  prestmt
)
"se.ml" 159 3433 3442 "se.ml" 159 3433 3444
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 159 3433 3448 "se.ml" 159 3433 3457
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 159 3433 3458 "se.ml" 159 3433 3459
type(
  arg
)
ident(
  int_ref y "se.ml" 158 3406 3419 "se.ml" 158 3406 3420
)
"se.ml" 159 3433 3460 "se.ml" 159 3433 3463
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 159 3433 3447 "se.ml" 159 3433 3464
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 160 3468 3477 "se.ml" 160 3468 3479
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 160 3468 3483 "se.ml" 160 3468 3492
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 160 3468 3493 "se.ml" 160 3468 3494
type(
  arg
)
ident(
  int_ref z "se.ml" 158 3406 3424 "se.ml" 158 3406 3425
)
"se.ml" 160 3468 3495 "se.ml" 160 3468 3498
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 160 3468 3482 "se.ml" 160 3468 3499
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 161 3503 3514 "se.ml" 161 3503 3516
type(
  bop
)
ident(
  int_ref op "se.ml" 158 3406 3421 "se.ml" 158 3406 3423
)
"se.ml" 162 3522 3530 "se.ml" 162 3522 3534
type(
  bop
)
"se.ml" 162 3522 3540 "se.ml" 162 3522 3542
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 162 3522 3542 "se.ml" 162 3522 3543
type(
  pc -> int -> pc
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 162 3522 3543 "se.ml" 162 3522 3544
type(
  int
)
"se.ml" 162 3522 3540 "se.ml" 162 3522 3544
type(
  pc
)
"se.ml" 162 3522 3545 "se.ml" 162 3522 3549
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 162 3522 3551 "se.ml" 162 3522 3563
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 162 3522 3564 "se.ml" 162 3522 3565
type(
  id
)
ident(
  int_ref x "se.ml" 158 3406 3417 "se.ml" 158 3406 3418
)
"se.ml" 162 3522 3574 "se.ml" 162 3522 3580
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_add
)
"se.ml" 162 3522 3581 "se.ml" 162 3522 3584
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 162 3522 3585 "se.ml" 162 3522 3587
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 159 3433 3442 "se.ml" 159 3433 3444
)
"se.ml" 162 3522 3588 "se.ml" 162 3522 3590
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref z' "se.ml" 160 3468 3477 "se.ml" 160 3468 3479
)
"se.ml" 162 3522 3573 "se.ml" 162 3522 3591
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 162 3522 3566 "se.ml" 162 3522 3592
type(
  cont
)
"se.ml" 162 3522 3593 "se.ml" 162 3522 3596
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 162 3522 3551 "se.ml" 162 3522 3596
call(
  stack
)
type(
  mem
)
"se.ml" 162 3522 3539 "se.ml" 162 3522 3597
type(
  state
)
"se.ml" 162 3522 3538 "se.ml" 162 3522 3598
type(
  state list
)
"se.ml" 163 3599 3607 "se.ml" 163 3599 3612
type(
  bop
)
"se.ml" 163 3599 3618 "se.ml" 163 3599 3620
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 163 3599 3620 "se.ml" 163 3599 3621
type(
  pc -> int -> pc
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 163 3599 3621 "se.ml" 163 3599 3622
type(
  int
)
"se.ml" 163 3599 3618 "se.ml" 163 3599 3622
type(
  pc
)
"se.ml" 163 3599 3623 "se.ml" 163 3599 3627
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 163 3599 3629 "se.ml" 163 3599 3641
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 163 3599 3642 "se.ml" 163 3599 3643
type(
  id
)
ident(
  int_ref x "se.ml" 158 3406 3417 "se.ml" 158 3406 3418
)
"se.ml" 163 3599 3652 "se.ml" 163 3599 3658
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_sub
)
"se.ml" 163 3599 3659 "se.ml" 163 3599 3662
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 163 3599 3663 "se.ml" 163 3599 3665
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 159 3433 3442 "se.ml" 159 3433 3444
)
"se.ml" 163 3599 3666 "se.ml" 163 3599 3668
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref z' "se.ml" 160 3468 3477 "se.ml" 160 3468 3479
)
"se.ml" 163 3599 3651 "se.ml" 163 3599 3669
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 163 3599 3644 "se.ml" 163 3599 3670
type(
  cont
)
"se.ml" 163 3599 3671 "se.ml" 163 3599 3674
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 163 3599 3629 "se.ml" 163 3599 3674
call(
  stack
)
type(
  mem
)
"se.ml" 163 3599 3617 "se.ml" 163 3599 3675
type(
  state
)
"se.ml" 163 3599 3616 "se.ml" 163 3599 3676
type(
  state list
)
"se.ml" 164 3677 3685 "se.ml" 164 3677 3690
type(
  bop
)
"se.ml" 164 3677 3696 "se.ml" 164 3677 3698
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 164 3677 3698 "se.ml" 164 3677 3699
type(
  pc -> int -> pc
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 164 3677 3699 "se.ml" 164 3677 3700
type(
  int
)
"se.ml" 164 3677 3696 "se.ml" 164 3677 3700
type(
  pc
)
"se.ml" 164 3677 3701 "se.ml" 164 3677 3705
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 164 3677 3707 "se.ml" 164 3677 3719
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 164 3677 3720 "se.ml" 164 3677 3721
type(
  id
)
ident(
  int_ref x "se.ml" 158 3406 3417 "se.ml" 158 3406 3418
)
"se.ml" 164 3677 3730 "se.ml" 164 3677 3736
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_mul
)
"se.ml" 164 3677 3737 "se.ml" 164 3677 3740
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 164 3677 3741 "se.ml" 164 3677 3743
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 159 3433 3442 "se.ml" 159 3433 3444
)
"se.ml" 164 3677 3744 "se.ml" 164 3677 3746
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref z' "se.ml" 160 3468 3477 "se.ml" 160 3468 3479
)
"se.ml" 164 3677 3729 "se.ml" 164 3677 3747
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 164 3677 3722 "se.ml" 164 3677 3748
type(
  cont
)
"se.ml" 164 3677 3749 "se.ml" 164 3677 3752
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 164 3677 3707 "se.ml" 164 3677 3752
call(
  stack
)
type(
  mem
)
"se.ml" 164 3677 3695 "se.ml" 164 3677 3753
type(
  state
)
"se.ml" 164 3677 3694 "se.ml" 164 3677 3754
type(
  state list
)
"se.ml" 165 3755 3763 "se.ml" 165 3755 3766
type(
  bop
)
"se.ml" 166 3770 3783 "se.ml" 166 3770 3788
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  (pc * pcond * mem) list
)
ident(
  int_ref assrt "se.ml" 132 2694 2700 "se.ml" 132 2694 2705
)
"se.ml" 166 3770 3789 "se.ml" 166 3770 3792
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 166 3770 3794 "se.ml" 166 3770 3802
type(
  OcamlSTP.context ->
  ([ `bool ], _[< `const | `expr | `var > `expr ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bool_not
)
"se.ml" 166 3770 3803 "se.ml" 166 3770 3806
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 166 3770 3808 "se.ml" 166 3770 3813
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], _[< `const | `expr | `var > `const ]) OcamlSTP.expr ->
  ([ `bool ], _[< `const | `expr | `var > `expr ] as 'a) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_eq
)
"se.ml" 166 3770 3814 "se.ml" 166 3770 3817
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 166 3770 3818 "se.ml" 166 3770 3820
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref z' "se.ml" 160 3468 3477 "se.ml" 160 3468 3479
)
"se.ml" 166 3770 3822 "se.ml" 166 3770 3831
type(
  OcamlSTP.context ->
  int ->
  int -> ([ `bv ], _[< `const | `expr | `var > `const ] as 'b) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 166 3770 3832 "se.ml" 166 3770 3835
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 166 3770 3836 "se.ml" 166 3770 3837
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 166 3770 3838 "se.ml" 166 3770 3839
type(
  int
)
"se.ml" 166 3770 3821 "se.ml" 166 3770 3840
type(
  ([ `bv ], 'b) OcamlSTP.expr
)
"se.ml" 166 3770 3807 "se.ml" 166 3770 3841
type(
  ([ `bool ], 'a) OcamlSTP.expr
)
"se.ml" 166 3770 3793 "se.ml" 166 3770 3842
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 166 3770 3783 "se.ml" 166 3770 3842
call(
  stack
)
type(
  (pc * pcond * mem) list
)
"se.ml" 167 3871 3881 "se.ml" 167 3871 3883
type(
  (pc * pcond * mem) list
)
"se.ml" 167 3871 3887 "se.ml" 167 3871 3889
type(
  state list
)
"se.ml" 168 3890 3902 "se.ml" 168 3890 3904
type(
  pc
)
ident(
  def pc "se.ml" 168 3890 3918 "se.ml" 168 3890 3984
)
"se.ml" 168 3890 3905 "se.ml" 168 3890 3910
type(
  pcond
)
ident(
  def cond' "se.ml" 168 3890 3918 "se.ml" 168 3890 3984
)
"se.ml" 168 3890 3911 "se.ml" 168 3890 3912
type(
  mem
)
"se.ml" 168 3890 3901 "se.ml" 168 3890 3913
type(
  pc * pcond * mem
)
"se.ml" 168 3890 3900 "se.ml" 168 3890 3914
type(
  (pc * pcond * mem) list
)
"se.ml" 168 3890 3920 "se.ml" 168 3890 3922
type(
  pc
)
ident(
  int_ref pc "se.ml" 168 3890 3902 "se.ml" 168 3890 3904
)
"se.ml" 168 3890 3923 "se.ml" 168 3890 3928
type(
  pcond
)
ident(
  int_ref cond' "se.ml" 168 3890 3905 "se.ml" 168 3890 3910
)
"se.ml" 168 3890 3930 "se.ml" 168 3890 3942
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 168 3890 3943 "se.ml" 168 3890 3944
type(
  id
)
ident(
  int_ref x "se.ml" 158 3406 3417 "se.ml" 158 3406 3418
)
"se.ml" 168 3890 3953 "se.ml" 168 3890 3966
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_div
)
"se.ml" 168 3890 3967 "se.ml" 168 3890 3970
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 168 3890 3971 "se.ml" 168 3890 3973
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 159 3433 3442 "se.ml" 159 3433 3444
)
"se.ml" 168 3890 3974 "se.ml" 168 3890 3976
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref z' "se.ml" 160 3468 3477 "se.ml" 160 3468 3479
)
"se.ml" 168 3890 3952 "se.ml" 168 3890 3977
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 168 3890 3945 "se.ml" 168 3890 3978
type(
  cont
)
"se.ml" 168 3890 3979 "se.ml" 168 3890 3982
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 168 3890 3930 "se.ml" 168 3890 3982
call(
  stack
)
type(
  mem
)
"se.ml" 168 3890 3919 "se.ml" 168 3890 3983
type(
  state
)
"se.ml" 168 3890 3918 "se.ml" 168 3890 3984
type(
  state list
)
"se.ml" 169 3985 3995 "se.ml" 169 3985 3996
type(
  (pc * pcond * mem) list
)
"se.ml" 169 3985 4000 "se.ml" 169 3985 4008
type(
  string -> state list
)
ident(
  ext_ref Pervasives.failwith
)
"se.ml" 169 3985 4009 "se.ml" 169 3985 4044
type(
  string
)
"se.ml" 169 3985 4000 "se.ml" 169 3985 4044
call(
  stack
)
type(
  state list
)
"se.ml" 166 3770 3777 "se.ml" 169 3985 4044
type(
  state list
)
"se.ml" 161 3503 3508 "se.ml" 169 3985 4044
type(
  state list
)
"se.ml" 160 3468 3473 "se.ml" 169 3985 4044
type(
  state list
)
"se.ml" 158 3406 3430 "se.ml" 170 4045 4050
type(
  state list
)
"se.ml" 171 4051 4062 "se.ml" 171 4051 4063
type(
  id
)
ident(
  def x "se.ml" 172 4074 4080 "se.ml" 173 4147 4196
)
"se.ml" 171 4051 4064 "se.ml" 171 4051 4067
type(
  uop
)
"se.ml" 171 4051 4068 "se.ml" 171 4051 4069
type(
  arg
)
ident(
  def y "se.ml" 172 4074 4080 "se.ml" 173 4147 4196
)
"se.ml" 171 4051 4057 "se.ml" 171 4051 4070
type(
  prestmt
)
"se.ml" 172 4074 4084 "se.ml" 172 4074 4086
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 172 4074 4089 "se.ml" 172 4074 4095
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_neg
)
"se.ml" 172 4074 4096 "se.ml" 172 4074 4099
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 172 4074 4101 "se.ml" 172 4074 4110
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 172 4074 4111 "se.ml" 172 4074 4112
type(
  arg
)
ident(
  int_ref y "se.ml" 171 4051 4068 "se.ml" 171 4051 4069
)
"se.ml" 172 4074 4113 "se.ml" 172 4074 4116
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 172 4074 4100 "se.ml" 172 4074 4117
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 172 4074 4089 "se.ml" 172 4074 4117
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 173 4147 4154 "se.ml" 173 4147 4156
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 173 4147 4156 "se.ml" 173 4147 4157
type(
  pc -> int -> pc
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 173 4147 4157 "se.ml" 173 4147 4158
type(
  int
)
"se.ml" 173 4147 4154 "se.ml" 173 4147 4158
type(
  pc
)
"se.ml" 173 4147 4159 "se.ml" 173 4147 4163
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 173 4147 4165 "se.ml" 173 4147 4177
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 173 4147 4178 "se.ml" 173 4147 4179
type(
  id
)
ident(
  int_ref x "se.ml" 171 4051 4062 "se.ml" 171 4051 4063
)
"se.ml" 173 4147 4187 "se.ml" 173 4147 4189
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 172 4074 4084 "se.ml" 172 4074 4086
)
"se.ml" 173 4147 4180 "se.ml" 173 4147 4190
type(
  cont
)
"se.ml" 173 4147 4191 "se.ml" 173 4147 4194
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 173 4147 4165 "se.ml" 173 4147 4194
call(
  stack
)
type(
  mem
)
"se.ml" 173 4147 4153 "se.ml" 173 4147 4195
type(
  state
)
"se.ml" 173 4147 4152 "se.ml" 173 4147 4196
type(
  state list
)
"se.ml" 172 4074 4080 "se.ml" 173 4147 4196
type(
  state list
)
"se.ml" 174 4197 4209 "se.ml" 174 4197 4210
type(
  id
)
ident(
  def x "se.ml" 174 4197 4217 "se.ml" 174 4197 4276
)
"se.ml" 174 4197 4211 "se.ml" 174 4197 4212
type(
  arg
)
ident(
  def y "se.ml" 174 4197 4217 "se.ml" 174 4197 4276
)
"se.ml" 174 4197 4203 "se.ml" 174 4197 4213
type(
  prestmt
)
"se.ml" 174 4197 4219 "se.ml" 174 4197 4221
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 174 4197 4221 "se.ml" 174 4197 4222
type(
  pc -> int -> pc
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 174 4197 4222 "se.ml" 174 4197 4223
type(
  int
)
"se.ml" 174 4197 4219 "se.ml" 174 4197 4223
type(
  pc
)
"se.ml" 174 4197 4224 "se.ml" 174 4197 4228
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 174 4197 4230 "se.ml" 174 4197 4242
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 174 4197 4243 "se.ml" 174 4197 4244
type(
  id
)
ident(
  int_ref x "se.ml" 174 4197 4209 "se.ml" 174 4197 4210
)
"se.ml" 174 4197 4253 "se.ml" 174 4197 4262
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 174 4197 4263 "se.ml" 174 4197 4264
type(
  arg
)
ident(
  int_ref y "se.ml" 174 4197 4211 "se.ml" 174 4197 4212
)
"se.ml" 174 4197 4265 "se.ml" 174 4197 4268
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 174 4197 4252 "se.ml" 174 4197 4269
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 174 4197 4245 "se.ml" 174 4197 4270
type(
  cont
)
"se.ml" 174 4197 4271 "se.ml" 174 4197 4274
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 174 4197 4230 "se.ml" 174 4197 4274
call(
  stack
)
type(
  mem
)
"se.ml" 174 4197 4218 "se.ml" 174 4197 4275
type(
  state
)
"se.ml" 174 4197 4217 "se.ml" 174 4197 4276
type(
  state list
)
"se.ml" 175 4277 4293 "se.ml" 175 4277 4294
type(
  id
)
ident(
  def x "se.ml" 176 4302 4307 "se.ml" 177 4356 4410
)
"se.ml" 175 4277 4295 "se.ml" 175 4277 4296
type(
  int
)
ident(
  def i "se.ml" 176 4302 4307 "se.ml" 177 4356 4410
)
"se.ml" 175 4277 4283 "se.ml" 175 4277 4297
type(
  prestmt
)
"se.ml" 176 4302 4311 "se.ml" 176 4302 4312
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 176 4302 4315 "se.ml" 176 4302 4324
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr ->
  int -> ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref initArray "se.ml" 56 1041 1049 "se.ml" 56 1041 1058
)
"se.ml" 176 4302 4326 "se.ml" 176 4302 4335
type(
  OcamlSTP.context ->
  id -> int -> int -> ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.array_var
)
"se.ml" 176 4302 4336 "se.ml" 176 4302 4339
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 176 4302 4340 "se.ml" 176 4302 4341
type(
  id
)
ident(
  int_ref x "se.ml" 175 4277 4293 "se.ml" 175 4277 4294
)
"se.ml" 176 4302 4342 "se.ml" 176 4302 4343
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 176 4302 4344 "se.ml" 176 4302 4345
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 176 4302 4325 "se.ml" 176 4302 4346
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 176 4302 4348 "se.ml" 176 4302 4349
type(
  int
)
ident(
  int_ref i "se.ml" 175 4277 4295 "se.ml" 175 4277 4296
)
"se.ml" 176 4302 4349 "se.ml" 176 4302 4350
type(
  int -> int -> int
)
ident(
  ext_ref Pervasives.( - )
)
"se.ml" 176 4302 4350 "se.ml" 176 4302 4351
type(
  int
)
"se.ml" 176 4302 4347 "se.ml" 176 4302 4352
type(
  int
)
"se.ml" 176 4302 4315 "se.ml" 176 4302 4352
call(
  stack
)
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 177 4356 4363 "se.ml" 177 4356 4365
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 177 4356 4365 "se.ml" 177 4356 4366
type(
  pc -> int -> pc
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 177 4356 4366 "se.ml" 177 4356 4367
type(
  int
)
"se.ml" 177 4356 4363 "se.ml" 177 4356 4367
type(
  pc
)
"se.ml" 177 4356 4368 "se.ml" 177 4356 4372
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 177 4356 4374 "se.ml" 177 4356 4386
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 177 4356 4387 "se.ml" 177 4356 4388
type(
  id
)
ident(
  int_ref x "se.ml" 175 4277 4293 "se.ml" 175 4277 4294
)
"se.ml" 177 4356 4398 "se.ml" 177 4356 4399
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 176 4302 4311 "se.ml" 176 4302 4312
)
"se.ml" 177 4356 4401 "se.ml" 177 4356 4402
type(
  int
)
ident(
  int_ref i "se.ml" 175 4277 4295 "se.ml" 175 4277 4296
)
"se.ml" 177 4356 4389 "se.ml" 177 4356 4404
type(
  cont
)
"se.ml" 177 4356 4405 "se.ml" 177 4356 4408
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 177 4356 4374 "se.ml" 177 4356 4408
call(
  stack
)
type(
  mem
)
"se.ml" 177 4356 4362 "se.ml" 177 4356 4409
type(
  state
)
"se.ml" 177 4356 4361 "se.ml" 177 4356 4410
type(
  state list
)
"se.ml" 176 4302 4307 "se.ml" 177 4356 4410
type(
  state list
)
"se.ml" 178 4411 4425 "se.ml" 178 4411 4426
type(
  id
)
ident(
  def x "se.ml" 178 4411 4435 "se.ml" 189 4895 4900
)
"se.ml" 178 4411 4427 "se.ml" 178 4411 4428
type(
  arg
)
ident(
  def i "se.ml" 178 4411 4435 "se.ml" 189 4895 4900
)
"se.ml" 178 4411 4429 "se.ml" 178 4411 4430
type(
  arg
)
ident(
  def y "se.ml" 178 4411 4435 "se.ml" 189 4895 4900
)
"se.ml" 178 4411 4417 "se.ml" 178 4411 4431
type(
  prestmt
)
"se.ml" 179 4437 4446 "se.ml" 179 4437 4447
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 179 4437 4448 "se.ml" 179 4437 4449
type(
  int
)
"se.ml" 179 4437 4446 "se.ml" 179 4437 4449
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 179 4437 4452 "se.ml" 179 4437 4463
type(
  arg -> mem -> ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
ident(
  int_ref lookupArray "se.ml" 118 2310 2314 "se.ml" 118 2310 2325
)
"se.ml" 179 4437 4468 "se.ml" 179 4437 4469
type(
  id
)
ident(
  int_ref x "se.ml" 178 4411 4425 "se.ml" 178 4411 4426
)
"se.ml" 179 4437 4464 "se.ml" 179 4437 4470
type(
  arg
)
"se.ml" 179 4437 4471 "se.ml" 179 4437 4474
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 179 4437 4452 "se.ml" 179 4437 4474
call(
  stack
)
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 180 4478 4487 "se.ml" 180 4478 4489
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 180 4478 4492 "se.ml" 180 4478 4501
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 180 4478 4502 "se.ml" 180 4478 4503
type(
  arg
)
ident(
  int_ref i "se.ml" 178 4411 4427 "se.ml" 178 4411 4428
)
"se.ml" 180 4478 4504 "se.ml" 180 4478 4507
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 180 4478 4492 "se.ml" 180 4478 4507
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 182 4539 4548 "se.ml" 182 4539 4549
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 182 4539 4552 "se.ml" 182 4539 4560
type(
  OcamlSTP.context ->
  ([ `bool ], _[< `const | `expr | `var > `expr ]) OcamlSTP.expr ->
  ([ `bool ], _[< `const | `expr | `var > `expr ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bool_and
)
"se.ml" 182 4539 4561 "se.ml" 182 4539 4564
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 182 4539 4566 "se.ml" 182 4539 4578
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], _[< `const | `expr | `var > `const ]) OcamlSTP.expr ->
  ([ `bool ], _[< `const | `expr | `var > `expr ] as 'c) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_lt
)
"se.ml" 182 4539 4579 "se.ml" 182 4539 4582
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 182 4539 4583 "se.ml" 182 4539 4585
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref i' "se.ml" 180 4478 4487 "se.ml" 180 4478 4489
)
"se.ml" 182 4539 4587 "se.ml" 182 4539 4596
type(
  OcamlSTP.context ->
  int ->
  int -> ([ `bv ], _[< `const | `expr | `var > `const ] as 'd) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 182 4539 4597 "se.ml" 182 4539 4600
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 182 4539 4601 "se.ml" 182 4539 4602
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 182 4539 4603 "se.ml" 182 4539 4604
type(
  int
)
ident(
  int_ref n "se.ml" 179 4437 4448 "se.ml" 179 4437 4449
)
"se.ml" 182 4539 4586 "se.ml" 182 4539 4605
type(
  ([ `bv ], 'd) OcamlSTP.expr
)
"se.ml" 182 4539 4565 "se.ml" 182 4539 4606
type(
  ([ `bool ], 'c) OcamlSTP.expr
)
"se.ml" 182 4539 4608 "se.ml" 182 4539 4620
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], _[< `const | `expr | `var > `const ]) OcamlSTP.expr ->
  ([ `bool ], _[< `const | `expr | `var > `expr ] as 'e) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_ge
)
"se.ml" 182 4539 4621 "se.ml" 182 4539 4624
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 182 4539 4625 "se.ml" 182 4539 4627
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref i' "se.ml" 180 4478 4487 "se.ml" 180 4478 4489
)
"se.ml" 182 4539 4629 "se.ml" 182 4539 4638
type(
  OcamlSTP.context ->
  int ->
  int -> ([ `bv ], _[< `const | `expr | `var > `const ] as 'f) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 182 4539 4639 "se.ml" 182 4539 4642
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 182 4539 4643 "se.ml" 182 4539 4644
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 182 4539 4645 "se.ml" 182 4539 4646
type(
  int
)
"se.ml" 182 4539 4628 "se.ml" 182 4539 4647
type(
  ([ `bv ], 'f) OcamlSTP.expr
)
"se.ml" 182 4539 4607 "se.ml" 182 4539 4648
type(
  ([ `bool ], 'e) OcamlSTP.expr
)
"se.ml" 182 4539 4552 "se.ml" 182 4539 4648
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 183 4653 4664 "se.ml" 183 4653 4669
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  (pc * pcond * mem) list
)
ident(
  int_ref assrt "se.ml" 132 2694 2700 "se.ml" 132 2694 2705
)
"se.ml" 183 4653 4670 "se.ml" 183 4653 4673
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 183 4653 4674 "se.ml" 183 4653 4675
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref c "se.ml" 182 4539 4548 "se.ml" 182 4539 4549
)
"se.ml" 183 4653 4664 "se.ml" 183 4653 4675
call(
  stack
)
type(
  (pc * pcond * mem) list
)
"se.ml" 184 4681 4689 "se.ml" 184 4681 4691
type(
  (pc * pcond * mem) list
)
"se.ml" 184 4681 4695 "se.ml" 184 4681 4697
type(
  state list
)
"se.ml" 185 4698 4708 "se.ml" 185 4698 4710
type(
  pc
)
ident(
  def pc "se.ml" 186 4724 4731 "se.ml" 187 4782 4836
)
"se.ml" 185 4698 4711 "se.ml" 185 4698 4716
type(
  pcond
)
ident(
  def cond' "se.ml" 186 4724 4731 "se.ml" 187 4782 4836
)
"se.ml" 185 4698 4717 "se.ml" 185 4698 4718
type(
  mem
)
"se.ml" 185 4698 4707 "se.ml" 185 4698 4719
type(
  pc * pcond * mem
)
"se.ml" 185 4698 4706 "se.ml" 185 4698 4720
type(
  (pc * pcond * mem) list
)
"se.ml" 186 4724 4735 "se.ml" 186 4724 4737
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 186 4724 4740 "se.ml" 186 4724 4751
type(
  OcamlSTP.context ->
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.array_write
)
"se.ml" 186 4724 4752 "se.ml" 186 4724 4755
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 186 4724 4756 "se.ml" 186 4724 4757
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 179 4437 4446 "se.ml" 179 4437 4447
)
"se.ml" 186 4724 4758 "se.ml" 186 4724 4760
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref i' "se.ml" 180 4478 4487 "se.ml" 180 4478 4489
)
"se.ml" 186 4724 4762 "se.ml" 186 4724 4771
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 186 4724 4772 "se.ml" 186 4724 4773
type(
  arg
)
ident(
  int_ref y "se.ml" 178 4411 4429 "se.ml" 178 4411 4430
)
"se.ml" 186 4724 4774 "se.ml" 186 4724 4777
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 186 4724 4761 "se.ml" 186 4724 4778
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 186 4724 4740 "se.ml" 186 4724 4778
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 187 4782 4791 "se.ml" 187 4782 4793
type(
  pc
)
ident(
  int_ref pc "se.ml" 185 4698 4708 "se.ml" 185 4698 4710
)
"se.ml" 187 4782 4794 "se.ml" 187 4782 4799
type(
  pcond
)
ident(
  int_ref cond' "se.ml" 185 4698 4711 "se.ml" 185 4698 4716
)
"se.ml" 187 4782 4801 "se.ml" 187 4782 4813
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 187 4782 4814 "se.ml" 187 4782 4815
type(
  id
)
ident(
  int_ref x "se.ml" 178 4411 4425 "se.ml" 178 4411 4426
)
"se.ml" 187 4782 4824 "se.ml" 187 4782 4826
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref a' "se.ml" 186 4724 4735 "se.ml" 186 4724 4737
)
"se.ml" 187 4782 4827 "se.ml" 187 4782 4828
type(
  int
)
ident(
  int_ref n "se.ml" 179 4437 4448 "se.ml" 179 4437 4449
)
"se.ml" 187 4782 4816 "se.ml" 187 4782 4830
type(
  cont
)
"se.ml" 187 4782 4831 "se.ml" 187 4782 4834
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 187 4782 4801 "se.ml" 187 4782 4834
call(
  stack
)
type(
  mem
)
"se.ml" 187 4782 4790 "se.ml" 187 4782 4835
type(
  state
)
"se.ml" 187 4782 4789 "se.ml" 187 4782 4836
type(
  state list
)
"se.ml" 186 4724 4731 "se.ml" 187 4782 4836
type(
  state list
)
"se.ml" 188 4837 4845 "se.ml" 188 4837 4846
type(
  (pc * pcond * mem) list
)
"se.ml" 188 4837 4850 "se.ml" 188 4837 4858
type(
  string -> state list
)
ident(
  ext_ref Pervasives.failwith
)
"se.ml" 188 4837 4859 "se.ml" 188 4837 4894
type(
  string
)
"se.ml" 188 4837 4850 "se.ml" 188 4837 4894
call(
  stack
)
type(
  state list
)
"se.ml" 183 4653 4658 "se.ml" 188 4837 4894
type(
  state list
)
"se.ml" 182 4539 4544 "se.ml" 188 4837 4894
type(
  state list
)
"se.ml" 180 4478 4483 "se.ml" 188 4837 4894
type(
  state list
)
"se.ml" 178 4411 4435 "se.ml" 189 4895 4900
type(
  state list
)
"se.ml" 190 4901 4914 "se.ml" 190 4901 4915
type(
  id
)
ident(
  def x "se.ml" 190 4901 4924 "se.ml" 201 5359 5364
)
"se.ml" 190 4901 4916 "se.ml" 190 4901 4917
type(
  id
)
ident(
  def y "se.ml" 190 4901 4924 "se.ml" 201 5359 5364
)
"se.ml" 190 4901 4918 "se.ml" 190 4901 4919
type(
  arg
)
ident(
  def i "se.ml" 190 4901 4924 "se.ml" 201 5359 5364
)
"se.ml" 190 4901 4907 "se.ml" 190 4901 4920
type(
  prestmt
)
"se.ml" 191 4926 4935 "se.ml" 191 4926 4936
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 191 4926 4937 "se.ml" 191 4926 4938
type(
  int
)
"se.ml" 191 4926 4935 "se.ml" 191 4926 4938
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 191 4926 4941 "se.ml" 191 4926 4952
type(
  arg -> mem -> ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
ident(
  int_ref lookupArray "se.ml" 118 2310 2314 "se.ml" 118 2310 2325
)
"se.ml" 191 4926 4957 "se.ml" 191 4926 4958
type(
  id
)
ident(
  int_ref y "se.ml" 190 4901 4916 "se.ml" 190 4901 4917
)
"se.ml" 191 4926 4953 "se.ml" 191 4926 4959
type(
  arg
)
"se.ml" 191 4926 4960 "se.ml" 191 4926 4963
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 191 4926 4941 "se.ml" 191 4926 4963
call(
  stack
)
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr * int
)
"se.ml" 192 4967 4976 "se.ml" 192 4967 4978
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 192 4967 4981 "se.ml" 192 4967 4990
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 192 4967 4991 "se.ml" 192 4967 4992
type(
  arg
)
ident(
  int_ref i "se.ml" 190 4901 4918 "se.ml" 190 4901 4919
)
"se.ml" 192 4967 4993 "se.ml" 192 4967 4996
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 192 4967 4981 "se.ml" 192 4967 4996
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 194 5028 5037 "se.ml" 194 5028 5038
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 194 5028 5041 "se.ml" 194 5028 5049
type(
  OcamlSTP.context ->
  ([ `bool ], _[< `const | `expr | `var > `expr ]) OcamlSTP.expr ->
  ([ `bool ], _[< `const | `expr | `var > `expr ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bool_and
)
"se.ml" 194 5028 5050 "se.ml" 194 5028 5053
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 194 5028 5055 "se.ml" 194 5028 5067
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], _[< `const | `expr | `var > `const ]) OcamlSTP.expr ->
  ([ `bool ], _[< `const | `expr | `var > `expr ] as 'g) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_lt
)
"se.ml" 194 5028 5068 "se.ml" 194 5028 5071
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 194 5028 5072 "se.ml" 194 5028 5074
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref i' "se.ml" 192 4967 4976 "se.ml" 192 4967 4978
)
"se.ml" 194 5028 5076 "se.ml" 194 5028 5085
type(
  OcamlSTP.context ->
  int ->
  int -> ([ `bv ], _[< `const | `expr | `var > `const ] as 'h) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 194 5028 5086 "se.ml" 194 5028 5089
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 194 5028 5090 "se.ml" 194 5028 5091
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 194 5028 5092 "se.ml" 194 5028 5093
type(
  int
)
ident(
  int_ref n "se.ml" 191 4926 4937 "se.ml" 191 4926 4938
)
"se.ml" 194 5028 5075 "se.ml" 194 5028 5094
type(
  ([ `bv ], 'h) OcamlSTP.expr
)
"se.ml" 194 5028 5054 "se.ml" 194 5028 5095
type(
  ([ `bool ], 'g) OcamlSTP.expr
)
"se.ml" 194 5028 5097 "se.ml" 194 5028 5109
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], _[< `const | `expr | `var > `const ]) OcamlSTP.expr ->
  ([ `bool ], _[< `const | `expr | `var > `expr ] as 'i) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_ge
)
"se.ml" 194 5028 5110 "se.ml" 194 5028 5113
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 194 5028 5114 "se.ml" 194 5028 5116
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref i' "se.ml" 192 4967 4976 "se.ml" 192 4967 4978
)
"se.ml" 194 5028 5118 "se.ml" 194 5028 5127
type(
  OcamlSTP.context ->
  int ->
  int -> ([ `bv ], _[< `const | `expr | `var > `const ] as 'j) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_of_int
)
"se.ml" 194 5028 5128 "se.ml" 194 5028 5131
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 194 5028 5132 "se.ml" 194 5028 5133
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 194 5028 5134 "se.ml" 194 5028 5135
type(
  int
)
"se.ml" 194 5028 5117 "se.ml" 194 5028 5136
type(
  ([ `bv ], 'j) OcamlSTP.expr
)
"se.ml" 194 5028 5096 "se.ml" 194 5028 5137
type(
  ([ `bool ], 'i) OcamlSTP.expr
)
"se.ml" 194 5028 5041 "se.ml" 194 5028 5137
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 195 5142 5153 "se.ml" 195 5142 5158
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  (pc * pcond * mem) list
)
ident(
  int_ref assrt "se.ml" 132 2694 2700 "se.ml" 132 2694 2705
)
"se.ml" 195 5142 5159 "se.ml" 195 5142 5162
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 195 5142 5163 "se.ml" 195 5142 5164
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref c "se.ml" 194 5028 5037 "se.ml" 194 5028 5038
)
"se.ml" 195 5142 5153 "se.ml" 195 5142 5164
call(
  stack
)
type(
  (pc * pcond * mem) list
)
"se.ml" 196 5170 5178 "se.ml" 196 5170 5180
type(
  (pc * pcond * mem) list
)
"se.ml" 196 5170 5184 "se.ml" 196 5170 5186
type(
  state list
)
"se.ml" 197 5187 5197 "se.ml" 197 5187 5199
type(
  pc
)
ident(
  def pc "se.ml" 198 5213 5220 "se.ml" 199 5251 5300
)
"se.ml" 197 5187 5200 "se.ml" 197 5187 5205
type(
  pcond
)
ident(
  def cond' "se.ml" 198 5213 5220 "se.ml" 199 5251 5300
)
"se.ml" 197 5187 5206 "se.ml" 197 5187 5207
type(
  mem
)
"se.ml" 197 5187 5196 "se.ml" 197 5187 5208
type(
  pc * pcond * mem
)
"se.ml" 197 5187 5195 "se.ml" 197 5187 5209
type(
  (pc * pcond * mem) list
)
"se.ml" 198 5213 5224 "se.ml" 198 5213 5225
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 198 5213 5228 "se.ml" 198 5213 5238
type(
  OcamlSTP.context ->
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.array_read
)
"se.ml" 198 5213 5239 "se.ml" 198 5213 5242
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 198 5213 5243 "se.ml" 198 5213 5244
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 191 4926 4935 "se.ml" 191 4926 4936
)
"se.ml" 198 5213 5245 "se.ml" 198 5213 5247
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref i' "se.ml" 192 4967 4976 "se.ml" 192 4967 4978
)
"se.ml" 198 5213 5228 "se.ml" 198 5213 5247
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 199 5251 5260 "se.ml" 199 5251 5262
type(
  pc
)
ident(
  int_ref pc "se.ml" 197 5187 5197 "se.ml" 197 5187 5199
)
"se.ml" 199 5251 5263 "se.ml" 199 5251 5268
type(
  pcond
)
ident(
  int_ref cond' "se.ml" 197 5187 5200 "se.ml" 197 5187 5205
)
"se.ml" 199 5251 5270 "se.ml" 199 5251 5282
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 199 5251 5283 "se.ml" 199 5251 5284
type(
  id
)
ident(
  int_ref x "se.ml" 190 4901 4914 "se.ml" 190 4901 4915
)
"se.ml" 199 5251 5292 "se.ml" 199 5251 5293
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref r "se.ml" 198 5213 5224 "se.ml" 198 5213 5225
)
"se.ml" 199 5251 5285 "se.ml" 199 5251 5294
type(
  cont
)
"se.ml" 199 5251 5295 "se.ml" 199 5251 5298
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 199 5251 5270 "se.ml" 199 5251 5298
call(
  stack
)
type(
  mem
)
"se.ml" 199 5251 5259 "se.ml" 199 5251 5299
type(
  state
)
"se.ml" 199 5251 5258 "se.ml" 199 5251 5300
type(
  state list
)
"se.ml" 198 5213 5220 "se.ml" 199 5251 5300
type(
  state list
)
"se.ml" 200 5301 5309 "se.ml" 200 5301 5310
type(
  (pc * pcond * mem) list
)
"se.ml" 200 5301 5314 "se.ml" 200 5301 5322
type(
  string -> state list
)
ident(
  ext_ref Pervasives.failwith
)
"se.ml" 200 5301 5323 "se.ml" 200 5301 5358
type(
  string
)
"se.ml" 200 5301 5314 "se.ml" 200 5301 5358
call(
  stack
)
type(
  state list
)
"se.ml" 195 5142 5147 "se.ml" 200 5301 5358
type(
  state list
)
"se.ml" 194 5028 5033 "se.ml" 200 5301 5358
type(
  state list
)
"se.ml" 192 4967 4972 "se.ml" 200 5301 5358
type(
  state list
)
"se.ml" 190 4901 4924 "se.ml" 201 5359 5364
type(
  state list
)
"se.ml" 202 5365 5376 "se.ml" 202 5365 5377
type(
  lab
)
ident(
  def l "se.ml" 202 5365 5381 "se.ml" 202 5365 5410
)
"se.ml" 202 5365 5371 "se.ml" 202 5365 5377
type(
  prestmt
)
"se.ml" 202 5365 5384 "se.ml" 202 5365 5389
type(
  lab -> (pc * lab option * prestmt) list -> pc
)
ident(
  int_ref getPC "se.ml" 97 1876 1880 "se.ml" 97 1876 1885
)
"se.ml" 202 5365 5390 "se.ml" 202 5365 5391
type(
  lab
)
ident(
  int_ref l "se.ml" 202 5365 5376 "se.ml" 202 5365 5377
)
"se.ml" 202 5365 5392 "se.ml" 202 5365 5397
type(
  (pc * lab option * prestmt) list
)
ident(
  int_ref stmts "se.ml" 131 2647 2657 "se.ml" 131 2647 2662
)
"se.ml" 202 5365 5384 "se.ml" 202 5365 5397
call(
  stack
)
type(
  pc
)
"se.ml" 202 5365 5399 "se.ml" 202 5365 5403
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 202 5365 5405 "se.ml" 202 5365 5408
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 202 5365 5382 "se.ml" 202 5365 5409
type(
  state
)
"se.ml" 202 5365 5381 "se.ml" 202 5365 5410
type(
  state list
)
"se.ml" 203 5411 5423 "se.ml" 203 5411 5424
type(
  arg
)
ident(
  def x "se.ml" 204 5437 5442 "se.ml" 234 6351 6360
)
"se.ml" 203 5411 5425 "se.ml" 203 5411 5427
type(
  rop
)
ident(
  def op "se.ml" 204 5437 5442 "se.ml" 234 6351 6360
)
"se.ml" 203 5411 5428 "se.ml" 203 5411 5429
type(
  arg
)
ident(
  def y "se.ml" 204 5437 5442 "se.ml" 234 6351 6360
)
"se.ml" 203 5411 5430 "se.ml" 203 5411 5431
type(
  lab
)
ident(
  def l "se.ml" 204 5437 5442 "se.ml" 234 6351 6360
)
"se.ml" 203 5411 5417 "se.ml" 203 5411 5432
type(
  prestmt
)
"se.ml" 204 5437 5446 "se.ml" 204 5437 5448
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 204 5437 5451 "se.ml" 204 5437 5460
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 204 5437 5461 "se.ml" 204 5437 5462
type(
  arg
)
ident(
  int_ref x "se.ml" 203 5411 5423 "se.ml" 203 5411 5424
)
"se.ml" 204 5437 5463 "se.ml" 204 5437 5466
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 204 5437 5451 "se.ml" 204 5437 5466
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 205 5470 5479 "se.ml" 205 5470 5481
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 205 5470 5484 "se.ml" 205 5470 5493
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 205 5470 5494 "se.ml" 205 5470 5495
type(
  arg
)
ident(
  int_ref y "se.ml" 203 5411 5428 "se.ml" 203 5411 5429
)
"se.ml" 205 5470 5496 "se.ml" 205 5470 5499
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 205 5470 5484 "se.ml" 205 5470 5499
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 206 5503 5512 "se.ml" 206 5503 5513
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 206 5503 5522 "se.ml" 206 5503 5524
type(
  rop
)
ident(
  int_ref op "se.ml" 203 5411 5425 "se.ml" 203 5411 5427
)
"se.ml" 207 5530 5538 "se.ml" 207 5530 5540
type(
  rop
)
"se.ml" 207 5530 5544 "se.ml" 207 5530 5549
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_eq
)
"se.ml" 207 5530 5550 "se.ml" 207 5530 5553
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 207 5530 5554 "se.ml" 207 5530 5556
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 204 5437 5446 "se.ml" 204 5437 5448
)
"se.ml" 207 5530 5557 "se.ml" 207 5530 5559
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 205 5470 5479 "se.ml" 205 5470 5481
)
"se.ml" 207 5530 5544 "se.ml" 207 5530 5559
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 208 5560 5568 "se.ml" 208 5560 5571
type(
  rop
)
"se.ml" 208 5560 5575 "se.ml" 208 5560 5583
type(
  OcamlSTP.context ->
  ([ `bool ], _[< `const | `expr | `var > `expr ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bool_not
)
"se.ml" 208 5560 5584 "se.ml" 208 5560 5587
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 208 5560 5589 "se.ml" 208 5560 5594
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], _[< `const | `expr | `var > `expr ] as 'k) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_eq
)
"se.ml" 208 5560 5595 "se.ml" 208 5560 5598
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 208 5560 5599 "se.ml" 208 5560 5601
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 204 5437 5446 "se.ml" 204 5437 5448
)
"se.ml" 208 5560 5602 "se.ml" 208 5560 5604
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 205 5470 5479 "se.ml" 205 5470 5481
)
"se.ml" 208 5560 5588 "se.ml" 208 5560 5605
type(
  ([ `bool ], 'k) OcamlSTP.expr
)
"se.ml" 208 5560 5575 "se.ml" 208 5560 5605
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 209 5606 5614 "se.ml" 209 5606 5616
type(
  rop
)
"se.ml" 209 5606 5620 "se.ml" 209 5606 5632
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_lt
)
"se.ml" 209 5606 5633 "se.ml" 209 5606 5636
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 209 5606 5637 "se.ml" 209 5606 5639
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 204 5437 5446 "se.ml" 204 5437 5448
)
"se.ml" 209 5606 5640 "se.ml" 209 5606 5642
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 205 5470 5479 "se.ml" 205 5470 5481
)
"se.ml" 209 5606 5620 "se.ml" 209 5606 5642
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 210 5643 5651 "se.ml" 210 5643 5653
type(
  rop
)
"se.ml" 210 5643 5657 "se.ml" 210 5643 5669
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_gt
)
"se.ml" 210 5643 5670 "se.ml" 210 5643 5673
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 210 5643 5674 "se.ml" 210 5643 5676
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 204 5437 5446 "se.ml" 204 5437 5448
)
"se.ml" 210 5643 5677 "se.ml" 210 5643 5679
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 205 5470 5479 "se.ml" 205 5470 5481
)
"se.ml" 210 5643 5657 "se.ml" 210 5643 5679
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 211 5680 5688 "se.ml" 211 5680 5690
type(
  rop
)
"se.ml" 211 5680 5694 "se.ml" 211 5680 5706
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_ge
)
"se.ml" 211 5680 5707 "se.ml" 211 5680 5710
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 211 5680 5711 "se.ml" 211 5680 5713
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 204 5437 5446 "se.ml" 204 5437 5448
)
"se.ml" 211 5680 5714 "se.ml" 211 5680 5716
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 205 5470 5479 "se.ml" 205 5470 5481
)
"se.ml" 211 5680 5694 "se.ml" 211 5680 5716
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 212 5717 5725 "se.ml" 212 5717 5727
type(
  rop
)
"se.ml" 212 5717 5731 "se.ml" 212 5717 5743
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_lt
)
"se.ml" 212 5717 5744 "se.ml" 212 5717 5747
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 212 5717 5748 "se.ml" 212 5717 5750
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 204 5437 5446 "se.ml" 204 5437 5448
)
"se.ml" 212 5717 5751 "se.ml" 212 5717 5753
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 205 5470 5479 "se.ml" 205 5470 5481
)
"se.ml" 212 5717 5731 "se.ml" 212 5717 5753
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 206 5503 5516 "se.ml" 212 5717 5753
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 214 5762 5771 "se.ml" 214 5762 5772
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 215 5777 5783 "se.ml" 215 5777 5790
type(
  OcamlSTP.context -> unit
)
ident(
  ext_ref OcamlSTP.vc_push
)
"se.ml" 215 5777 5791 "se.ml" 215 5777 5794
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 215 5777 5783 "se.ml" 215 5777 5794
type(
  unit
)
"se.ml" 216 5796 5802 "se.ml" 216 5796 5811
type(
  (([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> unit) ->
  pcond -> unit
)
ident(
  ext_ref List.iter
)
"se.ml" 216 5796 5818 "se.ml" 216 5796 5819
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  def c "se.ml" 216 5796 5823 "se.ml" 216 5796 5838
)
"se.ml" 216 5796 5823 "se.ml" 216 5796 5832
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> unit
)
ident(
  ext_ref OcamlSTP.vc_assert
)
"se.ml" 216 5796 5833 "se.ml" 216 5796 5836
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 216 5796 5837 "se.ml" 216 5796 5838
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref c "se.ml" 216 5796 5818 "se.ml" 216 5796 5819
)
"se.ml" 216 5796 5823 "se.ml" 216 5796 5838
type(
  unit
)
"se.ml" 216 5796 5812 "se.ml" 216 5796 5839
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> unit
)
"se.ml" 216 5796 5840 "se.ml" 216 5796 5844
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 216 5796 5802 "se.ml" 216 5796 5844
call(
  stack
)
type(
  unit
)
"se.ml" 217 5846 5856 "se.ml" 217 5846 5858
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 217 5846 5868 "se.ml" 217 5846 5876
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> OcamlSTP.validity
)
ident(
  ext_ref OcamlSTP.vc_query
)
"se.ml" 217 5846 5877 "se.ml" 217 5846 5880
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 217 5846 5881 "se.ml" 217 5846 5882
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref e "se.ml" 206 5503 5512 "se.ml" 206 5503 5513
)
"se.ml" 217 5846 5867 "se.ml" 217 5846 5883
type(
  OcamlSTP.validity
)
"se.ml" 218 5889 5898 "se.ml" 218 5889 5903
type(
  OcamlSTP.validity
)
"se.ml" 218 5889 5909 "se.ml" 218 5889 5914
type(
  lab -> (pc * lab option * prestmt) list -> pc
)
ident(
  int_ref getPC "se.ml" 97 1876 1880 "se.ml" 97 1876 1885
)
"se.ml" 218 5889 5915 "se.ml" 218 5889 5916
type(
  lab
)
ident(
  int_ref l "se.ml" 203 5411 5430 "se.ml" 203 5411 5431
)
"se.ml" 218 5889 5917 "se.ml" 218 5889 5922
type(
  (pc * lab option * prestmt) list
)
ident(
  int_ref stmts "se.ml" 131 2647 2657 "se.ml" 131 2647 2662
)
"se.ml" 218 5889 5909 "se.ml" 218 5889 5922
call(
  stack
)
type(
  pc
)
"se.ml" 218 5889 5923 "se.ml" 218 5889 5924
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref e "se.ml" 206 5503 5512 "se.ml" 206 5503 5513
)
"se.ml" 218 5889 5926 "se.ml" 218 5889 5930
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 218 5889 5923 "se.ml" 218 5889 5930
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list
)
"se.ml" 218 5889 5931 "se.ml" 218 5889 5934
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 218 5889 5908 "se.ml" 218 5889 5935
type(
  pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem
)
"se.ml" 218 5889 5907 "se.ml" 218 5889 5936
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 219 5937 5946 "se.ml" 219 5937 5953
type(
  OcamlSTP.validity
)
"se.ml" 219 5937 5957 "se.ml" 219 5937 5959
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 220 5960 5969 "se.ml" 220 5960 5978
type(
  OcamlSTP.validity
)
"se.ml" 220 5960 5982 "se.ml" 220 5960 5990
type(
  string ->
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
ident(
  ext_ref Pervasives.failwith
)
"se.ml" 220 5960 5991 "se.ml" 220 5960 6018
type(
  string
)
"se.ml" 220 5960 5982 "se.ml" 220 5960 6018
call(
  stack
)
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 217 5846 5861 "se.ml" 220 5960 6018
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 222 6028 6034 "se.ml" 222 6028 6040
type(
  OcamlSTP.context -> unit
)
ident(
  ext_ref OcamlSTP.vc_pop
)
"se.ml" 222 6028 6041 "se.ml" 222 6028 6044
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 222 6028 6034 "se.ml" 222 6028 6044
type(
  unit
)
"se.ml" 223 6046 6052 "se.ml" 223 6046 6054
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
ident(
  int_ref r' "se.ml" 217 5846 5856 "se.ml" 217 5846 5858
)
"se.ml" 222 6028 6034 "se.ml" 223 6046 6054
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 217 5846 5852 "se.ml" 223 6046 6054
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 216 5796 5802 "se.ml" 223 6046 6054
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 214 5762 5775 "se.ml" 224 6055 6061
type(
  (pc * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem) list
)
"se.ml" 225 6065 6074 "se.ml" 225 6065 6076
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 225 6065 6079 "se.ml" 225 6065 6087
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bool_not
)
"se.ml" 225 6065 6088 "se.ml" 225 6065 6091
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 225 6065 6092 "se.ml" 225 6065 6093
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref e "se.ml" 206 5503 5512 "se.ml" 206 5503 5513
)
"se.ml" 225 6065 6079 "se.ml" 225 6065 6093
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 226 6097 6102 "se.ml" 226 6097 6109
type(
  OcamlSTP.context -> unit
)
ident(
  ext_ref OcamlSTP.vc_push
)
"se.ml" 226 6097 6110 "se.ml" 226 6097 6113
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 226 6097 6102 "se.ml" 226 6097 6113
type(
  unit
)
"se.ml" 227 6115 6120 "se.ml" 227 6115 6129
type(
  (([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> unit) ->
  pcond -> unit
)
ident(
  ext_ref List.iter
)
"se.ml" 227 6115 6136 "se.ml" 227 6115 6137
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  def c "se.ml" 227 6115 6141 "se.ml" 227 6115 6156
)
"se.ml" 227 6115 6141 "se.ml" 227 6115 6150
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> unit
)
ident(
  ext_ref OcamlSTP.vc_assert
)
"se.ml" 227 6115 6151 "se.ml" 227 6115 6154
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 227 6115 6155 "se.ml" 227 6115 6156
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref c "se.ml" 227 6115 6136 "se.ml" 227 6115 6137
)
"se.ml" 227 6115 6141 "se.ml" 227 6115 6156
type(
  unit
)
"se.ml" 227 6115 6130 "se.ml" 227 6115 6157
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> unit
)
"se.ml" 227 6115 6158 "se.ml" 227 6115 6162
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 227 6115 6120 "se.ml" 227 6115 6162
call(
  stack
)
type(
  unit
)
"se.ml" 228 6164 6173 "se.ml" 228 6164 6175
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 228 6164 6185 "se.ml" 228 6164 6193
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> OcamlSTP.validity
)
ident(
  ext_ref OcamlSTP.vc_query
)
"se.ml" 228 6164 6194 "se.ml" 228 6164 6197
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 228 6164 6198 "se.ml" 228 6164 6200
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref e' "se.ml" 225 6065 6074 "se.ml" 225 6065 6076
)
"se.ml" 228 6164 6184 "se.ml" 228 6164 6201
type(
  OcamlSTP.validity
)
"se.ml" 229 6207 6215 "se.ml" 229 6207 6220
type(
  OcamlSTP.validity
)
"se.ml" 229 6207 6226 "se.ml" 229 6207 6228
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 229 6207 6228 "se.ml" 229 6207 6229
type(
  pc -> int -> int
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 229 6207 6229 "se.ml" 229 6207 6230
type(
  int
)
"se.ml" 229 6207 6226 "se.ml" 229 6207 6230
type(
  int
)
"se.ml" 229 6207 6231 "se.ml" 229 6207 6233
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref e' "se.ml" 225 6065 6074 "se.ml" 225 6065 6076
)
"se.ml" 229 6207 6235 "se.ml" 229 6207 6239
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 229 6207 6231 "se.ml" 229 6207 6239
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list
)
"se.ml" 229 6207 6240 "se.ml" 229 6207 6243
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 229 6207 6225 "se.ml" 229 6207 6244
type(
  int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem
)
"se.ml" 229 6207 6224 "se.ml" 229 6207 6245
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 230 6246 6254 "se.ml" 230 6246 6261
type(
  OcamlSTP.validity
)
"se.ml" 230 6246 6265 "se.ml" 230 6246 6267
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 231 6268 6276 "se.ml" 231 6268 6285
type(
  OcamlSTP.validity
)
"se.ml" 231 6268 6289 "se.ml" 231 6268 6297
type(
  string ->
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
ident(
  ext_ref Pervasives.failwith
)
"se.ml" 231 6268 6298 "se.ml" 231 6268 6325
type(
  string
)
"se.ml" 231 6268 6289 "se.ml" 231 6268 6325
call(
  stack
)
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 228 6164 6178 "se.ml" 231 6268 6325
type(
  (int * ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr list * mem)
  list
)
"se.ml" 233 6334 6339 "se.ml" 233 6334 6345
type(
  OcamlSTP.context -> unit
)
ident(
  ext_ref OcamlSTP.vc_pop
)
"se.ml" 233 6334 6346 "se.ml" 233 6334 6349
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 233 6334 6339 "se.ml" 233 6334 6349
type(
  unit
)
"se.ml" 234 6351 6356 "se.ml" 234 6351 6358
type(
  state list
)
ident(
  int_ref r' "se.ml" 228 6164 6173 "se.ml" 228 6164 6175
)
"se.ml" 234 6351 6358 "se.ml" 234 6351 6359
type(
  state list -> state list -> state list
)
ident(
  ext_ref Pervasives.( @ )
)
"se.ml" 234 6351 6359 "se.ml" 234 6351 6360
type(
  state list
)
ident(
  int_ref r "se.ml" 214 5762 5771 "se.ml" 214 5762 5772
)
"se.ml" 234 6351 6356 "se.ml" 234 6351 6360
call(
  stack
)
type(
  state list
)
"se.ml" 233 6334 6339 "se.ml" 234 6351 6360
type(
  state list
)
"se.ml" 228 6164 6169 "se.ml" 234 6351 6360
type(
  state list
)
"se.ml" 227 6115 6120 "se.ml" 234 6351 6360
type(
  state list
)
"se.ml" 226 6097 6102 "se.ml" 234 6351 6360
type(
  state list
)
"se.ml" 225 6065 6070 "se.ml" 234 6351 6360
type(
  state list
)
"se.ml" 214 5762 5767 "se.ml" 234 6351 6360
type(
  state list
)
"se.ml" 206 5503 5508 "se.ml" 234 6351 6360
type(
  state list
)
"se.ml" 205 5470 5475 "se.ml" 234 6351 6360
type(
  state list
)
"se.ml" 204 5437 5442 "se.ml" 234 6351 6360
type(
  state list
)
"se.ml" 237 6490 6504 "se.ml" 237 6490 6505
type(
  arg
)
ident(
  def x "se.ml" 237 6490 6515 "se.ml" 249 6859 6864
)
"se.ml" 237 6490 6506 "se.ml" 237 6490 6508
type(
  rop
)
ident(
  def op "se.ml" 237 6490 6515 "se.ml" 249 6859 6864
)
"se.ml" 237 6490 6509 "se.ml" 237 6490 6510
type(
  arg
)
ident(
  def y "se.ml" 237 6490 6515 "se.ml" 249 6859 6864
)
"se.ml" 237 6490 6496 "se.ml" 237 6490 6511
type(
  prestmt
)
"se.ml" 238 6517 6526 "se.ml" 238 6517 6528
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 238 6517 6531 "se.ml" 238 6517 6540
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 238 6517 6541 "se.ml" 238 6517 6542
type(
  arg
)
ident(
  int_ref x "se.ml" 237 6490 6504 "se.ml" 237 6490 6505
)
"se.ml" 238 6517 6543 "se.ml" 238 6517 6546
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 238 6517 6531 "se.ml" 238 6517 6546
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 239 6550 6559 "se.ml" 239 6550 6561
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 239 6550 6564 "se.ml" 239 6550 6573
type(
  arg -> mem -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref lookupInt "se.ml" 106 2030 2034 "se.ml" 106 2030 2043
)
"se.ml" 239 6550 6574 "se.ml" 239 6550 6575
type(
  arg
)
ident(
  int_ref y "se.ml" 237 6490 6509 "se.ml" 237 6490 6510
)
"se.ml" 239 6550 6576 "se.ml" 239 6550 6579
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 239 6550 6564 "se.ml" 239 6550 6579
call(
  stack
)
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 240 6583 6592 "se.ml" 240 6583 6593
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 240 6583 6602 "se.ml" 240 6583 6604
type(
  rop
)
ident(
  int_ref op "se.ml" 237 6490 6506 "se.ml" 237 6490 6508
)
"se.ml" 241 6610 6618 "se.ml" 241 6610 6620
type(
  rop
)
"se.ml" 241 6610 6624 "se.ml" 241 6610 6629
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_eq
)
"se.ml" 241 6610 6630 "se.ml" 241 6610 6633
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 241 6610 6634 "se.ml" 241 6610 6636
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 238 6517 6526 "se.ml" 238 6517 6528
)
"se.ml" 241 6610 6637 "se.ml" 241 6610 6639
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 239 6550 6559 "se.ml" 239 6550 6561
)
"se.ml" 241 6610 6624 "se.ml" 241 6610 6639
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 242 6640 6648 "se.ml" 242 6640 6651
type(
  rop
)
"se.ml" 242 6640 6655 "se.ml" 242 6640 6663
type(
  OcamlSTP.context ->
  ([ `bool ], _[< `const | `expr | `var > `expr ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bool_not
)
"se.ml" 242 6640 6664 "se.ml" 242 6640 6667
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 242 6640 6669 "se.ml" 242 6640 6674
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], _[< `const | `expr | `var > `expr ] as 'l) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_eq
)
"se.ml" 242 6640 6675 "se.ml" 242 6640 6678
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 242 6640 6679 "se.ml" 242 6640 6681
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 238 6517 6526 "se.ml" 238 6517 6528
)
"se.ml" 242 6640 6682 "se.ml" 242 6640 6684
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 239 6550 6559 "se.ml" 239 6550 6561
)
"se.ml" 242 6640 6668 "se.ml" 242 6640 6685
type(
  ([ `bool ], 'l) OcamlSTP.expr
)
"se.ml" 242 6640 6655 "se.ml" 242 6640 6685
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 243 6686 6694 "se.ml" 243 6686 6696
type(
  rop
)
"se.ml" 243 6686 6700 "se.ml" 243 6686 6712
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_lt
)
"se.ml" 243 6686 6713 "se.ml" 243 6686 6716
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 243 6686 6717 "se.ml" 243 6686 6719
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 238 6517 6526 "se.ml" 238 6517 6528
)
"se.ml" 243 6686 6720 "se.ml" 243 6686 6722
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 239 6550 6559 "se.ml" 239 6550 6561
)
"se.ml" 243 6686 6700 "se.ml" 243 6686 6722
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 244 6723 6731 "se.ml" 244 6723 6733
type(
  rop
)
"se.ml" 244 6723 6737 "se.ml" 244 6723 6749
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_gt
)
"se.ml" 244 6723 6750 "se.ml" 244 6723 6753
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 244 6723 6754 "se.ml" 244 6723 6756
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 238 6517 6526 "se.ml" 238 6517 6528
)
"se.ml" 244 6723 6757 "se.ml" 244 6723 6759
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 239 6550 6559 "se.ml" 239 6550 6561
)
"se.ml" 244 6723 6737 "se.ml" 244 6723 6759
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 245 6760 6768 "se.ml" 245 6760 6770
type(
  rop
)
"se.ml" 245 6760 6774 "se.ml" 245 6760 6786
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_ge
)
"se.ml" 245 6760 6787 "se.ml" 245 6760 6790
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 245 6760 6791 "se.ml" 245 6760 6793
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 238 6517 6526 "se.ml" 238 6517 6528
)
"se.ml" 245 6760 6794 "se.ml" 245 6760 6796
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 239 6550 6559 "se.ml" 239 6550 6561
)
"se.ml" 245 6760 6774 "se.ml" 245 6760 6796
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 246 6797 6805 "se.ml" 246 6797 6807
type(
  rop
)
"se.ml" 246 6797 6811 "se.ml" 246 6797 6823
type(
  OcamlSTP.context ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_signed_lt
)
"se.ml" 246 6797 6824 "se.ml" 246 6797 6827
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 246 6797 6828 "se.ml" 246 6797 6830
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 238 6517 6526 "se.ml" 238 6517 6528
)
"se.ml" 246 6797 6831 "se.ml" 246 6797 6833
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref y' "se.ml" 239 6550 6559 "se.ml" 239 6550 6561
)
"se.ml" 246 6797 6811 "se.ml" 246 6797 6833
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 240 6583 6596 "se.ml" 246 6797 6833
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 248 6842 6847 "se.ml" 248 6842 6852
type(
  OcamlSTP.context ->
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr -> state list
)
ident(
  int_ref assrt "se.ml" 132 2694 2700 "se.ml" 132 2694 2705
)
"se.ml" 248 6842 6853 "se.ml" 248 6842 6856
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 248 6842 6857 "se.ml" 248 6842 6858
type(
  ([ `bool ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref e "se.ml" 240 6583 6592 "se.ml" 240 6583 6593
)
"se.ml" 248 6842 6847 "se.ml" 248 6842 6858
call(
  stack
)
type(
  state list
)
"se.ml" 240 6583 6588 "se.ml" 248 6842 6858
type(
  state list
)
"se.ml" 239 6550 6555 "se.ml" 248 6842 6858
type(
  state list
)
"se.ml" 237 6490 6515 "se.ml" 249 6859 6864
type(
  state list
)
"se.ml" 250 6865 6878 "se.ml" 250 6865 6879
type(
  id
)
ident(
  def x "se.ml" 251 6883 6888 "se.ml" 252 6915 6952
)
"se.ml" 250 6865 6871 "se.ml" 250 6865 6879
type(
  prestmt
)
"se.ml" 251 6883 6892 "se.ml" 251 6883 6894
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 251 6883 6897 "se.ml" 251 6883 6903
type(
  OcamlSTP.context ->
  id -> int -> ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.bv_var
)
"se.ml" 251 6883 6904 "se.ml" 251 6883 6907
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 251 6883 6908 "se.ml" 251 6883 6909
type(
  id
)
ident(
  int_ref x "se.ml" 250 6865 6878 "se.ml" 250 6865 6879
)
"se.ml" 251 6883 6910 "se.ml" 251 6883 6911
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 251 6883 6897 "se.ml" 251 6883 6911
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
"se.ml" 252 6915 6922 "se.ml" 252 6915 6924
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 252 6915 6924 "se.ml" 252 6915 6925
type(
  pc -> int -> pc
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 252 6915 6925 "se.ml" 252 6915 6926
type(
  int
)
"se.ml" 252 6915 6922 "se.ml" 252 6915 6926
type(
  pc
)
"se.ml" 252 6915 6927 "se.ml" 252 6915 6931
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 252 6915 6933 "se.ml" 252 6915 6934
type(
  id
)
ident(
  int_ref x "se.ml" 250 6865 6878 "se.ml" 250 6865 6879
)
"se.ml" 252 6915 6942 "se.ml" 252 6915 6944
type(
  ([ `bv ], [ `const | `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref x' "se.ml" 251 6883 6892 "se.ml" 251 6883 6894
)
"se.ml" 252 6915 6936 "se.ml" 252 6915 6944
type(
  cont
)
"se.ml" 252 6915 6932 "se.ml" 252 6915 6945
type(
  id * cont
)
"se.ml" 252 6915 6947 "se.ml" 252 6915 6950
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 252 6915 6932 "se.ml" 252 6915 6950
type(
  mem
)
"se.ml" 252 6915 6921 "se.ml" 252 6915 6951
type(
  state
)
"se.ml" 252 6915 6920 "se.ml" 252 6915 6952
type(
  state list
)
"se.ml" 251 6883 6888 "se.ml" 252 6915 6952
type(
  state list
)
"se.ml" 253 6953 6969 "se.ml" 253 6953 6970
type(
  id
)
ident(
  def x "se.ml" 254 6977 6982 "se.ml" 255 7036 7090
)
"se.ml" 253 6953 6971 "se.ml" 253 6953 6972
type(
  int
)
ident(
  def i "se.ml" 254 6977 6982 "se.ml" 255 7036 7090
)
"se.ml" 253 6953 6959 "se.ml" 253 6953 6973
type(
  prestmt
)
"se.ml" 254 6977 6986 "se.ml" 254 6977 6987
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 254 6977 6990 "se.ml" 254 6977 7002
type(
  id ->
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr ->
  int -> ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref initSymArray "se.ml" 67 1269 1277 "se.ml" 67 1269 1289
)
"se.ml" 254 6977 7003 "se.ml" 254 6977 7004
type(
  id
)
ident(
  int_ref x "se.ml" 253 6953 6969 "se.ml" 253 6953 6970
)
"se.ml" 254 6977 7006 "se.ml" 254 6977 7015
type(
  OcamlSTP.context ->
  id -> int -> int -> ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  ext_ref OcamlSTP.array_var
)
"se.ml" 254 6977 7016 "se.ml" 254 6977 7019
type(
  OcamlSTP.context
)
ident(
  int_ref stp "se.ml" 39 804 808 "se.ml" 39 804 811
)
"se.ml" 254 6977 7020 "se.ml" 254 6977 7021
type(
  id
)
ident(
  int_ref x "se.ml" 253 6953 6969 "se.ml" 253 6953 6970
)
"se.ml" 254 6977 7022 "se.ml" 254 6977 7023
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 254 6977 7024 "se.ml" 254 6977 7025
type(
  int
)
ident(
  int_ref w "se.ml" 40 830 834 "se.ml" 40 830 835
)
"se.ml" 254 6977 7005 "se.ml" 254 6977 7026
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 254 6977 7028 "se.ml" 254 6977 7029
type(
  int
)
ident(
  int_ref i "se.ml" 253 6953 6971 "se.ml" 253 6953 6972
)
"se.ml" 254 6977 7029 "se.ml" 254 6977 7030
type(
  int -> int -> int
)
ident(
  ext_ref Pervasives.( - )
)
"se.ml" 254 6977 7030 "se.ml" 254 6977 7031
type(
  int
)
"se.ml" 254 6977 7027 "se.ml" 254 6977 7032
type(
  int
)
"se.ml" 254 6977 6990 "se.ml" 254 6977 7032
call(
  stack
)
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
"se.ml" 255 7036 7043 "se.ml" 255 7036 7045
type(
  pc
)
ident(
  int_ref pc "se.ml" 131 2647 2664 "se.ml" 131 2647 2666
)
"se.ml" 255 7036 7045 "se.ml" 255 7036 7046
type(
  pc -> int -> pc
)
ident(
  ext_ref Pervasives.( + )
)
"se.ml" 255 7036 7046 "se.ml" 255 7036 7047
type(
  int
)
"se.ml" 255 7036 7043 "se.ml" 255 7036 7047
type(
  pc
)
"se.ml" 255 7036 7048 "se.ml" 255 7036 7052
type(
  pcond
)
ident(
  int_ref cond "se.ml" 131 2647 2667 "se.ml" 131 2647 2671
)
"se.ml" 255 7036 7054 "se.ml" 255 7036 7066
type(
  id -> cont -> mem -> mem
)
ident(
  int_ref update_assoc "se.ml" 51 965 969 "se.ml" 51 965 981
)
"se.ml" 255 7036 7067 "se.ml" 255 7036 7068
type(
  id
)
ident(
  int_ref x "se.ml" 253 6953 6969 "se.ml" 253 6953 6970
)
"se.ml" 255 7036 7078 "se.ml" 255 7036 7079
type(
  ([ `array ], [ `expr | `var ]) OcamlSTP.expr
)
ident(
  int_ref a "se.ml" 254 6977 6986 "se.ml" 254 6977 6987
)
"se.ml" 255 7036 7081 "se.ml" 255 7036 7082
type(
  int
)
ident(
  int_ref i "se.ml" 253 6953 6971 "se.ml" 253 6953 6972
)
"se.ml" 255 7036 7069 "se.ml" 255 7036 7084
type(
  cont
)
"se.ml" 255 7036 7085 "se.ml" 255 7036 7088
type(
  mem
)
ident(
  int_ref mem "se.ml" 131 2647 2672 "se.ml" 131 2647 2675
)
"se.ml" 255 7036 7054 "se.ml" 255 7036 7088
call(
  stack
)
type(
  mem
)
"se.ml" 255 7036 7042 "se.ml" 255 7036 7089
type(
  state
)
"se.ml" 255 7036 7041 "se.ml" 255 7036 7090
type(
  state list
)
"se.ml" 254 6977 6982 "se.ml" 255 7036 7090
type(
  state list
)
"se.ml" 157 3390 3393 "se.ml" 255 7036 7090
type(
  state list
)
"se.ml" 156 3356 3359 "se.ml" 255 7036 7090
type(
  state list
)
"se.ml" 256 7091 7098 "se.ml" 256 7091 7104
type(
  exn
)
"se.ml" 257 7109 7112 "se.ml" 257 7109 7114
type(
  state list
)
"se.ml" 155 3350 3352 "se.ml" 257 7109 7114
type(
  state list
)
"se.ml" 131 2647 2692 "se.ml" 258 7115 7117
type(
  state list
)
type(
  state list
)
"se.ml" 259 7121 7130 "se.ml" 259 7121 7133
type(
  (pc * lab option * prestmt) list -> state list -> unit
)
"se.ml" 259 7121 7134 "se.ml" 259 7121 7139
type(
  (pc * lab option * prestmt) list
)
ident(
  def stmts "se.ml" 259 7121 7140 "se.ml" 265 7246 7277
)
"se.ml" 259 7121 7140 "se.ml" 259 7121 7146
type(
  state list
)
ident(
  def states "se.ml" 259 7121 7149 "se.ml" 265 7246 7277
)
"se.ml" 259 7121 7155 "se.ml" 259 7121 7161
type(
  state list
)
ident(
  int_ref states "se.ml" 259 7121 7140 "se.ml" 259 7121 7146
)
"se.ml" 260 7167 7171 "se.ml" 260 7167 7173
type(
  state list
)
"se.ml" 261 7178 7184 "se.ml" 261 7178 7185
type(
  int ref -> int
)
ident(
  ext_ref Pervasives.( ! )
)
"se.ml" 261 7178 7185 "se.ml" 261 7178 7190
type(
  int ref
)
ident(
  int_ref fails "se.ml" 130 2625 2630 "se.ml" 130 2625 2635
)
"se.ml" 261 7178 7184 "se.ml" 261 7178 7190
type(
  int
)
"se.ml" 261 7178 7191 "se.ml" 261 7178 7192
type(
  int -> int -> bool
)
ident(
  ext_ref Pervasives.( = )
)
"se.ml" 261 7178 7193 "se.ml" 261 7178 7194
type(
  int
)
"se.ml" 261 7178 7184 "se.ml" 261 7178 7194
type(
  bool
)
"se.ml" 262 7200 7204 "se.ml" 262 7200 7217
type(
  (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.printf
)
"se.ml" 262 7200 7218 "se.ml" 262 7200 7226
type(
  (unit, out_channel, unit) format
)
"se.ml" 262 7200 7204 "se.ml" 262 7200 7226
call(
  stack
)
type(
  unit
)
"se.ml" 261 7178 7181 "se.ml" 262 7200 7226
type(
  unit
)
"se.ml" 263 7228 7231 "se.ml" 263 7228 7233
type(
  unit
)
"se.ml" 261 7178 7181 "se.ml" 263 7228 7233
type(
  unit
)
"se.ml" 264 7234 7238 "se.ml" 264 7234 7239
type(
  state
)
ident(
  def h "se.ml" 265 7246 7249 "se.ml" 265 7246 7277
)
"se.ml" 264 7234 7241 "se.ml" 264 7234 7242
type(
  state list
)
ident(
  def t "se.ml" 265 7246 7249 "se.ml" 265 7246 7277
)
"se.ml" 264 7234 7238 "se.ml" 264 7234 7242
type(
  state list
)
"se.ml" 265 7246 7249 "se.ml" 265 7246 7252
type(
  (pc * lab option * prestmt) list -> state list -> unit
)
ident(
  int_ref run "se.ml" 259 7121 7130 "se.ml" 259 7121 7133
)
"se.ml" 265 7246 7253 "se.ml" 265 7246 7258
type(
  (pc * lab option * prestmt) list
)
ident(
  int_ref stmts "se.ml" 259 7121 7134 "se.ml" 259 7121 7139
)
"se.ml" 265 7246 7261 "se.ml" 265 7246 7265
type(
  (pc * lab option * prestmt) list -> state -> state list
)
ident(
  int_ref step "se.ml" 131 2647 2652 "se.ml" 131 2647 2656
)
"se.ml" 265 7246 7266 "se.ml" 265 7246 7271
type(
  (pc * lab option * prestmt) list
)
ident(
  int_ref stmts "se.ml" 259 7121 7134 "se.ml" 259 7121 7139
)
"se.ml" 265 7246 7272 "se.ml" 265 7246 7273
type(
  state
)
ident(
  int_ref h "se.ml" 264 7234 7238 "se.ml" 264 7234 7239
)
"se.ml" 265 7246 7260 "se.ml" 265 7246 7274
call(
  stack
)
type(
  state list
)
"se.ml" 265 7246 7274 "se.ml" 265 7246 7275
type(
  state list -> state list -> state list
)
ident(
  ext_ref Pervasives.( @ )
)
"se.ml" 265 7246 7275 "se.ml" 265 7246 7276
type(
  state list
)
ident(
  int_ref t "se.ml" 264 7234 7241 "se.ml" 264 7234 7242
)
"se.ml" 265 7246 7259 "se.ml" 265 7246 7277
call(
  stack
)
type(
  state list
)
"se.ml" 265 7246 7249 "se.ml" 265 7246 7277
call(
  tail
)
type(
  unit
)
"se.ml" 259 7121 7149 "se.ml" 265 7246 7277
type(
  unit
)
"se.ml" 267 7282 7283 "se.ml" 267 7282 7286
type(
  (pc * lab option * prestmt) list -> state list -> unit
)
ident(
  int_ref run "se.ml" 259 7121 7130 "se.ml" 259 7121 7133
)
"se.ml" 267 7282 7287 "se.ml" 267 7282 7292
type(
  (pc * lab option * prestmt) list
)
ident(
  int_ref stmts "se.ml" 129 2610 2617 "se.ml" 129 2610 2622
)
"se.ml" 267 7282 7294 "se.ml" 267 7282 7295
type(
  pc
)
"se.ml" 267 7282 7296 "se.ml" 267 7282 7298
type(
  pcond
)
"se.ml" 267 7282 7299 "se.ml" 267 7282 7301
type(
  mem
)
"se.ml" 267 7282 7294 "se.ml" 267 7282 7301
type(
  state
)
"se.ml" 267 7282 7293 "se.ml" 267 7282 7302
type(
  state list
)
"se.ml" 267 7282 7283 "se.ml" 267 7282 7302
call(
  tail
)
type(
  unit
)
"se.ml" 259 7121 7122 "se.ml" 267 7282 7302
type(
  unit
)
"se.ml" 131 2647 2648 "se.ml" 267 7282 7302
type(
  unit
)
"se.ml" 130 2625 2626 "se.ml" 267 7282 7302
type(
  unit
)
